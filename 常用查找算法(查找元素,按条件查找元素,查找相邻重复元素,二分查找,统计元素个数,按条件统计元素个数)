#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<algorithm>
#include<string>
#include<list>
#include<iostream>
#include<vector>
using namespace std;

//常用查找算法 - 掌握常用的查找算法
//算法简介 (后面有_if都是有条件)
// find	//查找元素
// find_if	//按条件查找元素
// adjacent_find	//查找相邻重复元素
// binary_search	//二分查找法(前提有序的)
// count	//统计元素个数
// count_if	//按条件统计元素个数
//总结
// 利用find可以在容器中查找指定的元素,返回值是迭代器, 查找元素重载是==
// 利用find_if可以在容器中按条件查找到元素,返回值是迭代器, 查找元素重载是()
// 面试题中如果出现查找相邻重复元素,记得用stl中的adjacent_find算法(前提是问一下面试官)
// 二分查找法查找效率很高,值得注意的是查找的容器中元素必须是有序的
// 统计自定义数据类型时候,需要配合重载operator==
// 按条件统计自定义数据类型时候,需要配合重载operator()


//find - 查找指定元素,找到返回指定元素的迭代器,找不到返回结束迭代器end()
//find(iterator beg, iterator end, value);
// 按值查找元素,找到返回指定迭代器,找不到返回结束迭代器位置
// beg	开始迭代器
// end	结束迭代器
// value	查找元素
//

//查找内置数据类型
//void test01_1()
//{
//	vector<int>v;
//	for (int i = 0; i < 10; i++)
//	{
//		v.push_back(i);
//	}
//
//	//查找是否有5
//	vector<int>::iterator it = find(v.begin(), v.end(), 5);
//	if (it == v.end())
//	{
//		cout << "找不到" << endl;
//	}
//	else
//	{
//		cout << "找到了 = " << *it << endl;
//	}
//	
//}
//
////自定义数据类型
//class Person
//{
//public:
//	Person(string name, int age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//
//	//重载== 底层find知道如何对比person数据类型
//	bool operator==(const Person& p)
//	{
//		if (this->m_Name == p.m_Name && this->m_Age == p.m_Age)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	string m_Name;
//	int m_Age;
//
//};
//
//void test01_2()
//{
//	list<Person> l;
//
//	//创建数据
//	Person p1("aaa", 12);
//	Person p2("bbb", 14);
//	Person p3("ccc", 13);
//	Person p4("ddd", 10);
//	Person pp("ddd", 10);
//
//	//放到容器中
//	l.push_back(p1);
//	l.push_back(p2);
//	l.push_back(p3);
//	l.push_back(p4);
//
//	list<Person>::iterator it = find(l.begin(), l.end(), pp);
//	if (it == l.end())
//	{
//		cout << "没找到" << endl;
//	}
//	else
//	{
//		cout << "找到了 姓名 = " << it->m_Name << "\t年龄" << it->m_Age << endl;
//	}
//
//}
//
////find_if - 按条件查找元素
////函数原型
//// find_if(iterator beg, iterator end(), _Pred);
//// 按值查找元素, 找到返回指定位置迭代器,找不到返回结束迭代器位置
//// beg	开始迭代器
//// end	结束迭代器
//// _Pred	函数或者谓词(返回bool类型的仿函数)
////
//
////内置数据类型
//class GreaterFive
//{
//public:
//	bool operator()(int val)
//	{
//		return val > 5;
//	}
//};
//
//void test02_1()
//{
//	vector<int> v;
//	for (int i = 0; i < 10; i++)
//	{
//		v.push_back(i);
//	}
//
//	vector<int>::iterator it = find_if(v.begin(), v.end(), GreaterFive());
//	if (it == v.end())
//	{
//		cout << "没找到" << endl;
//	}
//	else
//	{
//		cout << "找到了 = " << *it << endl;
//	}
//}

////自定义数据类型
//class Person
//{
//public:
//	Person(string name, int age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//	string m_Name;
//	int m_Age;
//};
//
//class Greater20
//{
//public:
//	bool operator()(Person& p) 
//	{
//		return p.m_Age > 20;
//	}
//};
//
//void test02_2()
//{
//	list<Person> l;
//	
//	//创建
//	Person p1("aaa", 10);
//	Person p2("bbb", 30);
//	Person p3("ccc", 20);
//	Person p4("ddd", 40);
//
//	//插入
//	l.push_back(p1);
//	l.push_back(p2);
//	l.push_back(p3);
//	l.push_back(p4);
//	
//	//大于20的人
//	list<Person>::iterator it = find_if(l.begin(), l.end(), Greater20());
//	if (it == l.end())
//	{
//		cout << "没找到" << endl;
//	}
//	else
//	{
//		cout << "找到了 名字 = " << it->m_Name << "\t年龄 = " << it->m_Age << endl;
//	}
//
//}

//adjacent_find - 查找相邻重复元素
//函数原型
// adjacent_find(iterator beg, iterator end)
// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器
// beg开始迭代器
// end结束迭代器
//

//void test03_1()
//{
//	vector<int>v;
//	v.push_back(0);
//	v.push_back(1);
//	v.push_back(0);
//	v.push_back(1);
//	v.push_back(0);
//	//v.push_back(0); //相邻重复元素
//
//	vector<int>::iterator it = adjacent_find(v.begin(), v.end());
//	if (it == v.end())
//	{
//		cout << "没找到" << endl;
//	}
//	else
//	{
//		cout << "找到了是 = " << *it << endl;
//	}
//
//}

//binary_search - 查找指定元素是否存在
//函数原型
// bool binary_search(iterator beg, iterator end, value);
// 查找指定的元素,查到 返回true 否则false
// 注意:在无序序列中不可使用
// beg	开始迭代器
// end	结束迭代器
// value	查找的元素
//

////常用查找算法 binary_search
//void test04_1()
//{
//	list<int> l;
//	for (int i = 0; i < 10; i++)
//	{
//		l.push_back(i);
//	}
//	//l.push_back(2); //如果是无序序列结果未知
//
//	//查找是否有9
//	//注意: 容器中必须是有序的序列
//	bool ret = binary_search(l.begin(), l.end(), 9);
//	if (ret)
//	{
//		cout << "找到了" << endl;
//	}
//	else
//	{
//		cout << "未找到" << endl;
//	}
//}

//count - 统计元素个数
// 函数原型
// count(iterator beg, iterator end, value);
// 统计元素出现的次数
// beg	开始迭代器
// end	结束迭代器
// value	统计的元素

//内置数据类型
//void test05_1()
//{
//	vector<int> v;
//
//	v.push_back(10);
//	v.push_back(20);
//	v.push_back(30);
//	v.push_back(40);
//	v.push_back(20);
//	v.push_back(40);
//
//	int num = count(v.begin(), v.end(), 40);
//	cout << "元素个数 = " << num << endl;
//
//}
//
////自定义数据类型
//class Person
//{
//public:
//	Person(string name, int age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//
//	bool operator==(const Person& p)
//	{
//		if (this->m_Age == p.m_Age)
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//	string m_Name;
//	int m_Age;
//};
//
//void test05_2()
//{
//	list<Person> l;
//
//	//创建数据
//	Person p1("aaa", 10);
//	Person p2("bbb", 10);
//	Person p3("ccc", 10);
//	Person p4("ddd", 20);
//	Person p5("eee", 30);
//
//	//插入数据
//	l.push_back(p1);
//	l.push_back(p2);
//	l.push_back(p3);
//	l.push_back(p4);
//	l.push_back(p5);
//
//	Person p("fff", 10);
//
//	int num = count(l.begin(), l.end(), p);
//	cout << "和fff同岁数为 = " << num << endl;
//}

//const_if - 按条件统计元素个数
// 函数模型
// count_if(iterator beg, iterator end, _Pred);
// 按条件统计元素出现次数
// beg	初始迭代器
// end	结束迭代器
// _Pred	谓词
//

//内置数据类型
//class Greater20
//{
//public:
//	bool operator()(int val)
//	{
//		return val > 20;
//	}
//
//};
//void test06_1()
//{
//	vector<int> v;
//	v.push_back(10);
//	v.push_back(20);
//	v.push_back(30);
//	v.push_back(40);
//	v.push_back(20);
//	v.push_back(40);
//
//	int num = count_if(v.begin(), v.end(), Greater20());
//	cout << "大于20的元素个数 = " << num << endl;
//}

//自定义数据类型
class Person
{
public:
	Person(string name, int age);
	~Person();

	string m_Name;
	int m_Age;
};

Person::Person(string name, int age)
{
	this->m_Name = name;
	this->m_Age = age;
}

Person::~Person()
{
}

class AgeGreater10
{
public:
	bool operator()(const Person& p)
	{
		if (p.m_Age > 10)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
};

void test06_2()
{
	list<Person>l;

	Person p1("aaa", 10);
	Person p2("bbb", 10);
	Person p3("ccc", 10);
	Person p4("ddd", 20);
	Person p5("eee", 30);

	l.push_back(p1);
	l.push_back(p2);
	l.push_back(p3);
	l.push_back(p4);
	l.push_back(p5);

	//大于10人数统计
	int num = count_if(l.begin(), l.end(), AgeGreater10());
	cout << "大于10的元素个数 = " << num << endl;

}

int main()
{
	//后面有_2都是自定义数据类型
	//test01_1();//find
	//test01_2();

	//test02_1();//find_if
	//test02_2();//find_if

	//test03_1();//adjacent_find

	//test04_1();//binary_search

	//test05_1();//count
	//test05_2();//count

	//test06_1();//count_if
	test06_2();//count_if

	system("pause");
	return 0;
}
