#define _CRT_SECURE_NO_WARNINGS 1
#include<functional>
#include<vector>
#include<list>
#include<algorithm>
#include<string>
#include<stdio.h>
#include<iostream>
using namespace std;

//关系仿函数 - 实现关系对比
//仿函数原型
//template<class T> bool aqual_to<T>	//等于
//template<class T> bool not_equal_to<T>	//不等于
//template<class T> bool greater<T>	//大于	(用的比较多)
//template<class T> bool greater_equal<T>	//大于等于
//template<class T> bool less<T>	//小于
//template<class T> bool less_equal<T>	//小于等于
//总结: 关系仿函数中最常用的就是greater<>大于

//template<class T> bool greater<T>	//大于	(用的比较多),因为排序的算法默认是小于(顺序表结构)
//class MyCompare
//{
//public:
//	bool operator()(int v1,int v2)
//	{
//		return v1 > v2;
//	}
//
//
//};
//
//void test01()
//{
//	vector<int> v;
//	v.push_back(10);
//	v.push_back(30);
//	v.push_back(50);
//	v.push_back(40);
//	v.push_back(20);
//
//	for (vector<int>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout<<endl;
//
//	//降序的
//	//sort(v.begin(), v.end(), MyCompare());//自己用的谓词
//	//greater<int>() 内建函数对象,编译器提供的
//	sort(v.begin(), v.end(),greater<int>());//编译器提供的(头文件functional)
//
//	for (vector<int>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//
//}
//
//int main()
//{
//	test01();
//	
//	system("pause");
//	return 0;
//}

//逻辑仿函数 - 实现逻辑运算
//函数原理
// template<class T> bool logical_and<T>	//逻辑与 (&&)
// template<class T> bool logical_or<T>	//逻辑或 (||)
// template<class T> bool logical_not<T>	//逻辑非 (!)
//总结:逻辑仿函数实际应用较少,了解即可

//template<class T> bool logical_not<T>	//逻辑非 (!)
void test01()
{
	list<bool> l;
	l.push_back(true);
	l.push_back(false);
	l.push_back(true);
	l.push_back(false);
	for (list<bool>::iterator it = l.begin(); it != l.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;

	//利用逻辑非 将容器l 搬运到容器l2中,并执行取反操作
	list<bool> l2;
	//l2.resize(l.size());//l2要开辟空间大小要和l一样 (如果没开辟,那么会报错,因为你生塞不进去)

	transform(l.begin(), l.end(), l2.begin(), logical_not<bool>());

	for (list<bool>::iterator it = l2.begin(); it != l2.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;


}

int main()
{
	test01();

	system("pause");
	return 0;
}
