#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<string>
using namespace std;

//map/multimap容器
//map基本概念
//简介
// map中所有元素都是pair
// pair中第一个元素为key(键值),起到索引作用,第二个元素为value(实键)(意思是第一个元素是找到第二个元素的东西,和哈希表类似)
// 所有元素都会根据元素的键值自动排序
//本质
// map/multimap属于关联式容器,底层结构使用二叉树实现
//优点
// 可以根据key值快速找到value值
// map和multimap区别
// map不允许容器中有重复的key值元素
// multimap允许容器中有重复key值元素

//map构造和赋值 - 对map容器进行构造和赋值操作
// 函数原型
// map<T1, T2> mp;	//map默认构造函数
// map(const map& mp);	//拷贝构造函数
//赋值
// map& operator=(const map& mp);	//重载等号操作符
//总结:map中所有元素都是成对出现,插入数据时候需要使用pair队组

//map容器构造和赋值
//typedef int dataType;
//void printMap(map<dataType, dataType>& m)
//{
//	for (map<dataType,dataType>::iterator it = m.begin(); it != m.end(); it++)
//	{
//		cout << "key = " << it->first << "\tvalue = " << (*it).second << endl;
//	}
//	cout << endl;
//}
//void test01()
//{
//	//创建map容器
//	map<dataType, dataType> m;
//
//	//和set容器一样是用insert,但是map是成对出现所以用到pair队组
//	//会按照key也就是第一个元素来排序.
//	m.insert(pair<dataType, dataType>(1, 10));
//	m.insert(pair<dataType, dataType>(3, 30));
//	m.insert(pair<dataType, dataType>(2, 20));
//	m.insert(pair<dataType, dataType>(4, 40));
//
//	printMap(m);
//
//	//拷贝构造
//	map<dataType, dataType>m2(m);
//	printMap(m2);
//
//	//赋值
//	map<dataType, dataType>m3;
//	m3 = m2;
//	printMap(m3);
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//map大小交换 - 统计map容器大小以及交换map容器
//函数原型
// size();	//返回容器中元素的数目
// empty();	//判断容器是否为空
// swap(st);	//交换两个集合容器
//总结
//统计大小 - size
//判断是否为空 - empty
//交换容器 - swap

//typedef int dataType;
//void printMap(map<dataType, dataType>& m)
//{
//	for (map<dataType, dataType>::iterator it = m.begin(); it != m.end(); it++)
//	{
//		cout << "key = " << it->first << "\tvalue = " << (*it).second << endl;
//	}
//	cout << endl;
//}
//
////大小
//void test01()
//{
//	//创建map容器
//	map<dataType, dataType> m;
//
//	//和set容器一样是用insert,但是map是成对出现所以用到pair队组
//	//会按照key也就是第一个元素来排序.
//	m.insert(pair<dataType, dataType>(1, 10));
//	m.insert(pair<dataType, dataType>(3, 30));
//	m.insert(pair<dataType, dataType>(2, 20));
//	m.insert(pair<dataType, dataType>(4, 40));
//
//	printMap(m);
//	if (m.empty())
//	{
//		cout << "为空" << endl;
//	}
//	else
//	{
//		cout << "不为空" << endl;
//		cout << "m的大小 = " << m.size() << endl;
//	}
//
//}
//
////交换
//void test02()
//{
//	map<dataType, dataType> m;
//	m.insert(pair<dataType, dataType>(1, 10));
//	m.insert(pair<dataType, dataType>(3, 30));
//	m.insert(pair<dataType, dataType>(2, 20));
//
//	map<dataType, dataType> m2;
//	m2.insert(pair<dataType, dataType>(3, 100));
//	m2.insert(pair<dataType, dataType>(4, 200));
//	m2.insert(pair<dataType, dataType>(5, 300));
//
//	cout << "交换前" << endl;
//	printMap(m);
//	printMap(m2);
//
//	cout << "交换后" << endl;
//	m.swap(m2);
//	printMap(m);
//	printMap(m2);
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//map插入和删除 - map容器进行插入数据和删除数据
//函数原型
// insert(elem);	//在容器中插入数据
// clear();	//清除所有元素
// erase(pos);	//删除pos迭代器所指的元素,返回下一个元素的迭代器
// erase(beg,end);	//删除区间[beg,end]所有元素,返回下一个元素的迭代器
// erase(key);	//删除容器中置为key的元素
//总结
//map插入的方式有很多,记住其一即可
//插入 - insert
//删除 - erase
//清空 - clear

//typedef int dataType;
//void printMap(map<dataType, dataType>& m)
//{
//	for (map<dataType, dataType>::iterator it = m.begin(); it != m.end(); it++)
//	{
//		cout << "key = " << it->first << "\tvalue = " << (*it).second << endl;
//	}
//	cout << endl;
//}
//void test01()
//{
//	//创建map容器
//	map<dataType, dataType> m;
//
//	//插入
//	//第一种
//	m.insert(pair<dataType, dataType>(1, 10));
//
//	//第二种
//	m.insert(make_pair(2,20));
//
//	//第三种
//	m.insert(map<dataType, dataType>::value_type(3, 30));
//
//	//第四种(不建议插入,因为你写一个m[5]不写value值,他会给你创建个key为5 value为0 的值)
//	m[4] = 40;
//
//	//[]不建议插入,用途 可以利用key访问到value
//	cout << m[4] << endl;
//
//	printMap(m);
//
//	//删除
//	m.erase(m.begin());
//	printMap(m);
//
//	m.erase(3); //按照key删除
//	printMap(m);
//
//	//清空
//	//m.erase(m.begin(), m.end());
//	m.clear();
//	printMap(m);
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//map查找和统计 - 对map容器进行查找数据以及统计数据
//函数原型
// find(key);	//查找key是否存在,若存在,返回该键值的元素的迭代器;若不存在,返回set.end();
// count(key);	//统计key的元素个数(map要么是0或1,但multimap不一样了)
//总结
//查找 - find (返回迭代器)
//统计 - count(对于map,结果为0或者1)

//map查找和统计
//typedef int dataType;
//void printMap(map<dataType, dataType>& m)
//{
//	for (map<dataType, dataType>::iterator it = m.begin(); it != m.end(); it++)
//	{
//		cout << "key = " << it->first << "\tvalue = " << (*it).second << endl;
//	}
//	cout << endl;
//}
//void test01()
//{
//	//查找
//	map<dataType, dataType> m;
//
//	//pair是指定类型,mkae_pair创建出来的pair是隐藏式推导的,推到可能会出意外
//	m.insert(pair<dataType, dataType>(1, 10));
//	m.insert(pair<dataType, dataType>(3, 30));
//	m.insert(pair<dataType, dataType>(2, 20));
//	m.insert(pair<dataType, dataType>(3, 40));
//
//
//	map<dataType,dataType>::iterator pos = m.find(3);
//	if (pos != m.end())
//	{
//		cout << "查到了key = " << pos->first << "\tvalue = " << pos->second << endl;
//	}
//	else
//	{
//		cout << "没有" << endl;
//	}
//
//	//printMap(m);
//	
//	//统计
//	//map不允许插入重复的key,对于count统计而言,结果要么为0 要么为1
//	//multimap的count统计可能大于1;
//	int num = m.count(3);
//	cout << "num = " << num << endl;
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//map容器排序 - map容器默认排序为按照key值进行 从小到大排序,掌握如何改变排序规则
//技术点
// 利用仿函数,可以改变排序规则
//总结
//利用仿函数可以指定map容器的排序规则
//对于自定义数据类型,map必须要制定排序规则,同set容器

//内置数据类型
//typedef int dataType;
//class MyCompare
//{
//public:
//	bool operator()(dataType v1,dataType v2)const
//	{
//		//降序
//		return v1 > v2;
//	}
//};
//
//void printMap(map<dataType, dataType, MyCompare>& m)
//{
//	for (map<dataType, dataType, MyCompare>::iterator it = m.begin(); it != m.end(); it++)
//	{
//		cout << "key = " << it->first << "\tvalue = " << (*it).second << endl;
//	}
//	cout << endl;
//}
//void test01()
//{
//	//利用仿函数解决排序的问题,仿函数本质是个类型
//	map<dataType, dataType,MyCompare> m;
//
//	//和set容器一样只能在插入之前确定好排序规则
//	m.insert(pair<dataType, dataType>(1, 10));
//	m.insert(pair<dataType, dataType>(3, 30));
//	m.insert(pair<dataType, dataType>(2, 20));
//	m.insert(pair<dataType, dataType>(4, 40));
//
//	printMap(m);
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//自定义数据类型
class Person
{
public:
	Person(string name, int age);
	~Person();
	
	string m_Name;
	int m_Age;

};

Person::Person(string name, int age)
{
	this->m_Name = name;
	this->m_Age = age;
}

Person::~Person()
{
}

class MyCompare
{
public:
	bool operator()(const Person& p1, const Person& p2)const
	{
		return p1.m_Age > p1.m_Age;
	}
};

void printMap(map<Person, int, MyCompare>& m)
{
	for (map<Person, int, MyCompare>::iterator it = m.begin(); it != m.end(); it++)
	{
		cout << "name = " << it->first.m_Name << "\tage = " << it->first.m_Age << "\tvalue = " << (*it).second << endl;
	}
	cout << endl;
}
void test01()
{
	//创建map容器
	map<Person, int, MyCompare> m;

	Person p1("小黑", 13);
	Person p2("小白", 15);
	Person p3("小绿", 12);
	Person p4("小灰", 14);

	m.insert(pair<Person, int>(p1, 10));
	m.insert(pair<Person, int>(p2, 30));
	m.insert(pair<Person, int>(p3, 20));
	m.insert(pair<Person, int>(p4, 40));

	cout << m.size() << endl;

	printMap(m);

}

int main()
{
	test01();

	system("pause");
	return 0;
}
