#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;

//string基本概念
//本质: string是C++风格的字符,而string的本质上是一个类
// string和char*区别
// char*是个指针
// string是个类,类内部封装了char*,管理这个字符串,是一个char*型的容器
// 特点
// string类内部封装了很多成员方法
// 列如,查找find,拷贝copy,删除delete,替换replace,插入insert
// string管理char*所分配的内存,不用担心复制越界和取值越界等,由类内部进行负责
// 
// string构造函数
// string();	//创建一个空的字符串,列如:string str;
// string(const char* s);	//使用字符串s初始化
// string(const string& str);	//使用一个string对象初始化另一个string对象
// string(int n, char c);	//使用n个字符,初始化;
// 
// 总结:string的多种构造方式没有可比性,灵活使用即可

//void test01()
//{
//	string s1;
//	const char* str = "hello world";
//
//	string s2(str);
//	cout << "s2 = " << s2 << endl;
//
//	string s3(s2);
//	cout << "s3 = " << s3 << endl;
//
//	string s4(10, 'a');
//	cout << "s4 = " << s4 << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string赋值操作
// 赋值的函数原型
// string& operator=(const char* s);	//char*类型字符串 赋值给当前的字符串
// string& operator=(const string &s);	//把字符串s赋给当前的字符串
// string& operator=(char s);	//字符赋值给当前字符串
// string& assign(const char *s);	//把字符串s赋值给当前的字符串
// string& assign(const char *s, int n);	//把字符串s的当前n个字符赋给当前的字符串
// string& assign(const string &s);	//把字符串s赋给当前字符串
// string& assign(int n, char c);	//用n个字符c赋给当前字符串
//

void test01()
{
	string str1;
	str1 = "hello world";
	cout << "str1 = " << str1 << endl;

	string str2;
	str2 = str1;
	cout << "str2 = " << str2 << endl;

	string str3;
	str3 = 'a';
	cout << "str3 = " << str3 << endl;

	string str4;
	str4.assign("hello C++");
	cout << "str4 = " << str4 << endl;

	string str5;
	str5.assign("hello C++", 5);
	cout << "str5 = " << str5 << endl;

	string str6;
	str6.assign(str5);
	cout << "str6 = " << str6 << endl;

	string str7;
	str7.assign(10, 'w');
	cout << "str7 = " << str7 << endl;
}

int main()
{
	test01();

	system("pause");
	return 0;
}

//string字符串拼接
