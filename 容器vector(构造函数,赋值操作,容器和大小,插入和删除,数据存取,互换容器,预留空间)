#define _CRT_SECURE_NO_WARNINGS 1
#include<string>
#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

//vecrot容器 - vector数据结构和数组非常相似,也称为单端数组
//vector与普通数组区别
// 不同之处在丁数组是静态控件,而vector可以动态扩展
//动态扩展
// 并不是在原空间之后连续接新空间,而是找更大的内存空间,然而将原数组拷贝新的空间,释放原空间
//(和C中的realloc差不多,但是realloc是在堆区)

//vector
//函数原型
//vector<T> v;	//采用模板实现类实现,默认构造函数
// vector(v.bcgin(),v,end())	//将v[begin(),end()]区间中的元素拷贝给本身
// vector(n,elem);	//构造函数将n个elem拷贝给本身
// vector(const vector &vec);	//拷贝构造函数
//总结:vector的多种构造方式没有可比性,灵活使用即可

//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	vector<int>v1;//默认构造 无参构造
//
//	for (int i = 0; i < 10; i++)
//	{
//		v1.push_back(i);
//	}
//	printVector(v1);
//
//	//通过区间方式进行构造
//	vector<dataType>v2(v1.begin(), v1.end());
//	printVector(v2);
//
//	//n个elem方式赋值
//	vector<dataType>v3(10, 100);
//	printVector(v3);
//
//	//拷贝构造
//	vector<dataType>v4(v3);
//	printVector(v4);
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vecrot赋值操作 - 给vector容器进行赋值
//函数原型
// vector& operator=(const vector &vec);	//重载等号操作
// assign(beg,end);	//将(beg,end)区间中的数据拷贝赋值给本身
// assign(n,elem);	//将n个elem拷贝赋值给本身
//总结: vector赋值方面比较简单,使用operator=,或使用assign都可以

//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
////vector赋值
//void test01()
//{
//	vector<dataType>v1;
//	for (int i = 0; i < 10; i++)
//	{
//		v1.push_back(i);
//	}
//	printVector(v1);
//
//	//赋值 operator=
//	vector<dataType>v2;
//	v2 = v1;
//	printVector(v2);
//
//	//assign
//	vector<dataType>v3;
//	v3.assign(v1.begin(), v1.end());
//	printVector(v3);
//
//	//n个elem方式赋值
//	vector<dataType>v4;
//	v4.assign(10, 100);
//	printVector(v4);
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vector容量和大小 - 对vector容器的容量和大小操作
// 函数原型
// empty();	//判断容器是否为空
// capacity();	//容器的容量
// size();	//返回容器中元素的个数
// resize(int num);	//重新指定容器的长度为num若容器变长,则以默认值填充新位置.	如果容器变短,则末尾超出容器长度的元素被删除
// resize(int num,elem);	//重新指定容器的长度为num若容器变长,则以elem值填充新位置.	如果容器变短,则末尾超出容器长度的元素被删除
//总结
//判断是否为空 -- empty -- 为空返回真
//返回元素个数 -- size
//返回容器容量 -- capacity
//重新指定大小 -- resize

//vector容器的容量和大小操作
//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)//vector<dataType>::iterator 是迭代器
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	vector<dataType>v1;
//	for (int i = 0; i < 10; i++)
//	{
//		v1.push_back(i);
//	}
//	printVector(v1);
//
//	if (v1.empty())//为真代表为空, 因为empty()判断,是否为空
//	{
//		cout << "v1为空" << endl;
//	}
//	else
//	{
//		cout << "v1不为空" << endl;
//		cout << "v1的容量" << v1.capacity() << endl;//是13,如果超过13会动态扩展
//		cout << "v1的大小为" << v1.size() << endl;
//	}
//
//	//重新定义大小
//	v1.resize(15,10);//利用重载的版本可以指定默认的填充值
//	printVector(v1);//如果重新指定的比原来长了,默认使用0填充新的位置
//
//	v1.resize(5);
//	printVector(v1);//如果重新指定的比原来短了,超出部分会删除掉
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vector插入和删除 -- 对vector容器进行插入,删除操作
//函数原型
// push_back(ele);	//尾部插入元素ele
// pop_back();	//尾删
// instert(const_iterator pos, ele);	//迭代器指向位置pos插入元素ele (参数是一个迭代器)
// instert(const_iterator pos, int count, ele);	//迭代器指向位置pos插入count个元素ele
// erase(const_iterator pos);	//删除迭代器指向的元素
// ersae(const_iterator start, const_iterator end);	//删除迭代器从start到end之间的元素
// clear();	//删除容器中所有元素
//总结:
//尾插 -- push_bask
//尾删 -- pop_bask
//插入 -- insert (迭代器位置)
//删除 -- erase (迭代器位置)
//清空 -- clear

//插入和删除
//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)//vector<dataType>::iterator 是迭代器
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	vector<dataType>v1;
//	//尾插
//	v1.push_back(10);
//	v1.push_back(20);
//	v1.push_back(30);
//	v1.push_back(40);
//	v1.push_back(50);
//
//	//遍历
//	printVector(v1);
//
//	//尾删
//	v1.pop_back();
//	printVector(v1);
//
//	//插入 第一个参数是迭代器
//	v1.insert(v1.begin(), 100);
//	printVector(v1);
//
//	v1.insert(v1.begin(), 2, 1000);
//	printVector(v1);
//
//	//删除 参数也是迭代器
//	v1.erase(v1.begin());
//	printVector(v1);
//
//	//类似于清空
//	v1.erase(v1.begin(), v1.end());
//	printVector(v1);
//
//	//清空
//	v1.clear();
//	printVector(v1);
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vector数据存取 -- 对vector中的数据的存取操作
//函数原理
// at(int idx);	//返回索引idx所指的数据
// operator[];	//返回索引idx所指的数据
// front();	//返回容器中第一个数据元素
// back();	//返回容器中最后一个数据元素
//总结
//出了用迭代器获取vector容器中元素,[]和at也可以
// front返回容器第一个元素
// back返回容器最后一个元素

//vector容器 数据存取
//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)//vector<dataType>::iterator 是迭代器
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	vector<dataType>v1;
//	for (int i = 0; i < 10; i++)
//	{
//		v1.push_back(i);
//	}
//	//printVector(v1);
//	//利用[]方式访问数组中元素
//	for (int t = 0; t < v1.size(); t++)//也可以这样来遍历
//	{
//		cout << v1[t] << " ";
//	}
//	cout << endl;
//
//	//利用at方式访问元素
//	for (int i = 0; i < v1.size(); i++)
//	{
//		cout << v1.at(i) << " ";
//	}
//	cout << endl;
//
//	//获取第一个元素
//	cout << "第一个元素 = " << v1.front() << endl;
//
//	//获取最后一个元素
//	cout << "最后一个元素 = " << v1.back() << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vector互换容器 - 实现两个容器内元素进行互换
//函数原型
// swap(vec);	//jiangvec于数组本身的元素互换
//总结: swap可以使两个容器互换,可以达到使用的收缩内存效果

//vector互换容器
//typedef int dataType;
//void printVector(vector<dataType>& v)
//{
//	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)//vector<dataType>::iterator 是迭代器
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
////基本使用
//void test01()
//{
//	vector<dataType>v1;
//	for (int i = 0; i < 10; i++)
//	{
//		v1.push_back(i);
//	}
//	cout << "交换前" << endl;
//	printVector(v1);
//
//	vector<dataType>v2;
//	for (int i = 10; i > 0; i--)
//	{
//		v2.push_back(i);
//	}
//	printVector(v2);
//
//	cout << "交换后" << endl;
//	v1.swap(v2);
//	printVector(v1);
//	printVector(v2);
//}
//
////实际用途
////巧用swap可以收缩内存空间
//void test02()
//{
//	vector<dataType>v;
//	for (int i = 0; i < 100; i++)
//	{
//		v.push_back(i);
//	}
//	cout << "v的容量 = " << v.capacity() << endl;
//	cout << "v的大小 = " << v.size() << endl;
//
//	v.resize(3);//重新指定大小 (容量不会变小)
//	cout << "v的容量 = " << v.capacity() << endl;
//	cout << "v的大小 = " << v.size() << endl;
//
//	//巧用swap收缩内存 - 利用了匿名对象
//	vector<dataType>(v).swap(v);
//	//vector<dataType>(v).swap(v);	//可以分为
//	//vector<dataType>(v)	//匿名的对象, 会按照v的大小来初始化匿名对象的大小 (不是容量)
//	//.swap(v)	//容器的交换, 而且匿名对象有个特点就是当这行代码执行完了,发现由匿名对象会立即释放
//	cout << "v的容量 = " << v.capacity() << endl;
//	cout << "v的大小 = " << v.size() << endl;
//
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//vector预留空间 - 减少vector在动态扩展容量时的扩展次数
//函数原理
// reserve(int len);	//容器预留len个元素长度,预留位置不初始化,元素不可访问
//总结:如果你的数据量较大,可以一开始用reserve预留空间

//vector容器 预留内存
typedef int dataType;
void printVector(vector<dataType>& v)
{
	for (vector<dataType>::iterator it = v.begin(); it < v.end(); it++)//vector<dataType>::iterator 是迭代器
	{
		cout << *it << " ";
	}
	cout << endl;
}

void test01()
{
	vector<dataType>v;

	//利用reserve预留空间
	v.reserve(100);

	int num = 0;//统计开辟次数
	int* p = NULL;
	for (int i = 0; i < 100; i++)
	{
		v.push_back(i);

		//插100个数据到底分配了对少次内存 (如果提前知道了有多少要插入,我们就可以不用一直去开辟内存了,所以才有了预留空间 (reserve))
		if (p != &v[0])//首地址
		{
			p = &v[0];
			num++;
		}
	}
	cout << "num = " << num << endl;
	//printVector(v);
}

int main()
{
	test01();

	system("pause");
	return 0;
}
