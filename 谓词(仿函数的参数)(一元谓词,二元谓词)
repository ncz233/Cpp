#define _CRT_SECURE_NO_WARNINGS 1
#include<vector>
#include<algorithm>
#include<list>
#include<iostream>
using namespace std;

//概念
// 返回bool类型的仿函数称为谓词
// 如果operator()接受一个参数,那么叫做一元谓词
// 如果operator()接受两个参数,那么叫做二元谓词
//总结:
// 参数只有一个的谓词,称为一元谓词
// 参数只有两个的谓词,称为二元谓词

//一元谓词
// 如果operator()接受一个参数,那么叫做一元谓词

class GreaterFive
{
public:
	bool operator()(int val)
	{
		return val > 5;
	}

};

void  test01()
{
	vector<int> v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	//查找大于5的数字
	//GreaterFive()匿名的函数对象,匿名的特点要记住,这行结束匿名对象就销毁

	vector<int>::iterator it = find_if(v.begin(), v.end(), GreaterFive());
	if (it == v.end())
	{
		cout << "没找到" << endl;
	}
	else
	{
		cout << "找到了大于5的数字为 = " << *it << endl;
	}

}

//二元谓词
//如果operator()接受两个参数,那么叫做二元谓词
class MySort1
{
public:
	bool operator()(int v1, int v2)
	{
		return v1 < v2;
	}

};

class MySort2
{
public:
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};

void test02()
{
	list<int>v;
	v.push_back(10);
	v.push_back(30);
	v.push_back(50);
	v.push_back(20);
	v.push_back(40);

	v.sort(MySort1());//非链表结构的内部没有自动排序,因为algorithm库中有且只能给非链表结构排序.链表结构的内部会给你排序的算法
	for (list<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;

	//使用函数对象,改变算法策略,变为排序规则为从大到小
	v.sort(MySort2());
	cout << "---------" << endl;
	for (list<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

int main()
{
	//test01();
	test02();

	system("pause");
	return 0;
}
