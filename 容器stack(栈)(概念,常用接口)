#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<algorithm>
#include<string>
#include<iostream>
#include<stack>
using namespace std;

//stack容器
//概念
// stack是一种先进后出的(frest in last out.filo)的结构容器,他只有一个出口 - (也就是所谓的栈)
// 栈中只有顶端的元素才可以被外界使用,因此站不允许有遍历行为,因为只有栈顶才可以访问 - (栈底是第一次放进去的元素)
// 
// 栈中进入数据称为 - 入栈
// 栈中弹出数据称为 - 出栈
// 
// 栈可以判断容器是否为空.
// 栈可以返回元素个数,进一个记录一个
//

//stack(栈)常用的接口 - 栈容器常用的对外接口
//构造函数
// stack<T>stk;	//stack采用模板类实现,stack对象的默认构造形式
// stack(const stack &stk);	//拷贝构造函数
// 
// 赋值操作
// stack& operator=(const stack &stk);	//重载等号操作符
// 
// 数据存取
// push(elem);	向栈顶添加元素
// pop();	//从栈顶移除第一个元素
// top();	//返回栈顶元素
// 
// 大小操作
// empty();	//判断堆栈是否为空 (为空返回真)
// size();	//返回栈的大小
//
//总结:
// 入栈 -push 
// 出栈 - pop
// 返回栈顶 - top
// 判断栈是否为空 - empty (为空是真)
// 返回栈大小 - size
//

//栈stack容器

void test01()
{
	//特点先进后出
	stack<int>s;

	//入栈
	s.push(10);
	s.push(20);
	s.push(30);
	s.push(40);

	cout << "弹出前栈大小 = " << s.size() << endl;

	//栈不为空,查看栈顶,并且执行出栈操作
	while (!s.empty())	//因为为空是真,所以取反,让不为空为真
	{
		//查看栈顶元素
		cout << "栈顶元素 = " << s.top() << endl;

		//出栈
		s.pop();

	}
	cout << "弹出后栈大小 = " << s.size() << endl;


}

int main()
{
	test01();

	system("pause");
	return 0;
}
