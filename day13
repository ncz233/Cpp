#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string>
#include<iostream>
using namespace std;

//运算符重定义
//运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型
// 总结：对于内置的表达式的运算符是不可能改变的，不要滥用运算符重载
// 
//加号运算符重载
// 作用：实现两个自定义数据类型相加的运算

//成员函数重载+号
//全局函数实现重载+号

//class Person
//{
//public:
//	
//	//成员函数重载+号
//	//Person operator+(Person& p)//这个是+号不是普通的函数，本来3=1可以但是3=1+2不行有了这个重载就可以了，简单说：p3 = p1 这个函数 p2，（this是指定，谁用是谁的，p1用了所以p1的，然后传进去了p2）
//	//{
//	//	Person temp;
//	//	temp.m_A = this->m_A + p.m_A;
//	//	temp.m_B = this->m_B + p.m_B;
//	//	return temp;
//	//}
//
//	int m_A;
//	int m_B;
//};
//
////全局函数实现重载+号
//Person operator+(Person& p1, Person& p2)
//{
//	Person temp;
//	temp.m_A = p1.m_A + p2.m_A;
//	temp.m_B = p1.m_B + p2.m_B;
//	return temp;
//}
//
////函数重载的版本
//Person operator+(Person& p1, int num)
//{
//	Person temp;
//	temp.m_A = p1.m_A + num;
//	temp.m_B = p1.m_B + num;
//	return temp;
//}
//
//void test01()
//{
//	Person p1;
//	p1.m_A = 10;
//	p1.m_B = 10;
//	Person p2;
//	p2.m_A = 10;
//	p2.m_B = 10;
//
//	Person p3;
//	//成员函数重载本质的调用
//	//Person p3 = p1.operator+(p2);
//
//	//全局函数重载本质的调用
//	//Person p3 = operator+(p1, p2);
//
//	p3 = p1 + p2;//两种调用简化之后就是这个
//	cout << "p3.m_A = " << p3.m_A << "\np3.m_B = " << p3.m_B << endl;
//
//	//运算符重载 也可以发生函数重载
//	Person p4;
//	p4 = p1 + 100;//person + int
//	cout << "p4.m_A = " << p4.m_A << "\np4.m_B = " << p4.m_B << endl;
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//左移运算符重载
