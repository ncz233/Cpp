#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<list>
#include<string>
using namespace std;

//list容器 - 将数据进行链式存储
//概念
// 链表(list)是一种物理存储单元上非连续的存储结构,数据元素的逻辑顺序是通过俩鸟中的栈中连接实现的
// 链表的组成 - 链表由一系列节点组成
// 节点的组成 - 一个是存储数据元素的数据域,另一个是存储下一个节点地址的指针域
// stl中的链表是一个双向循环链表 - (不是我以前做的单项头节点的链表,因为双向循环的链表太完美了,无题目可出)
// 
// 由于链表的存储方式并不是连续的内存空间,因此链表list中的迭代器只支持前移和后移,数以双向迭代器
// list优点
// 采用动态存储分配,不会造成内存的浪费和溢出
// 采用执行插入和删除十分方便,修改指针即可,不需要移动大量元素
// list缺点
// 链表灵活,但是空间(指针)和时间(遍历)额外耗费较大
// list有一个重要的性质,插入操作和删除操作都不会造成原有list迭代器的失效,在vector是不成立的
// 
// 总结
// stl中List和vector是两个最常被使用的容器,各有优缺点
//

//list构造函数 - 创建list容器
//函数模型
// list<T> lis;	//list采用模板类实现,对象的默认构造形式
// list(beg,end);	//构造函数将(beg,end)区间中的元素拷贝给本身
// list(n,elem);	//构造函数将n个elem拷贝本身
// list(const list &lis);	//拷贝构造函数
// 
// 总结
// list构造方式同其他几个stl常用容器,熟练掌握即可
//

//list容器构造函数
void printList(const list<int>& L)
{
	for (list<int>::const_iterator it = L.begin(); it != L.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

void test01()
{
	//创建
	list<int>L1;

	//添加数据
	L1.push_back(10);
	L1.push_back(20);
	L1.push_back(30);
	L1.push_back(40);

	//遍历容器
	printList(L1);

	//区间构造
	list<int>L2(L1.begin(), L1.end());
	printList(L2);

	//拷贝构造
	list<int>L3(L2);
	printList(L3);

	//n个elem
	list<int>L4(10, 100);
	printList(L4);


}

int main()
{
	test01();
	system("pause");
	return 0;
}

//list赋值和交换 - 给list容器进行赋值,以及交换list容器
// 函数原型
// assign(beg, end);	//将(beg,end)区间中的数据拷贝赋值给本身
// assign(n, elem);	//将n个elem拷贝赋值给本身
// list& operator=(const list &lst);	//重载符号操作符
// swap(lst);	//将lst与本身的元素互换
//
