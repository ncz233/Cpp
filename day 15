#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<iostream>
#include<string>
using namespace std;

//案列3 - 电脑组装
//抽象类
//抽象cpu
class CPU
{
public:
	CPU();
	~CPU();
	//抽象的显示函数
	virtual void calculate() = 0;

};

CPU::CPU()
{
}

CPU::~CPU()
{
}

//抽象gpu
class GPU
{
public:
	GPU();
	~GPU();
	virtual void display() = 0;

};

GPU::GPU()
{
}

GPU::~GPU()
{
}

//抽象内存
class Memory
{
public:
	Memory();
	~Memory();
	virtual void storage() = 0;
};

Memory::Memory()
{
}

Memory::~Memory()
{
}

//具体厂商
class IntelCPU :public CPU
{
	void calculate()
	{
		printf("这是英特尔的cpu\n");
	}
};

class IntelGPU :public GPU
{
	void display()
	{
		printf("这是英特尔的Gpu\n");
	}
};

class IntelMemory :public Memory
{
	void storage()
	{
		printf("这是英特尔的内存条\n");
	}
};

//AMD厂商
class AMDCPU :public CPU
{
	void calculate()
	{
		printf("这是AMD的cpu\n");
	}
};

class AMDGPU :public GPU
{
	void display()
	{
		printf("这是AMD的gpu\n");
	}
};

class AMDMemory :public Memory
{
	void storage()
	{
		printf("这是AMD的内存\n");
	}
};

class Computer
{
public:
	Computer(CPU* cpu, GPU* gpu, Memory* mem);
	//提供析构函数释放电脑零件
	~Computer();

	//工作的函数
	void work()
	{
		//让零件工作起来，调用接口
		m_cpu->calculate();
		m_gpu->display();
		m_mem->storage();
	}

private:
	CPU* m_cpu;//cpu的零件指针
	GPU* m_gpu;//gpu的零件指针
	Memory* m_mem;//内存的零件指针

};

Computer::Computer(CPU* cpu, GPU* gpu, Memory* mem)
{
	m_cpu = cpu;
	m_gpu = gpu;
	m_mem = mem;
}

Computer::~Computer()
{
	if (m_cpu != NULL)
	{
		delete m_cpu;
		m_cpu = NULL;
	}
	if (m_gpu != NULL)
	{
		delete m_gpu;
		m_gpu = NULL;
	}
	if (m_mem != NULL)
	{
		delete m_mem;
		m_mem = NULL;
	}
}

void test01()
{
	//第一台电脑零件
	CPU* intelCpu = new IntelCPU;
	GPU* intelGpu = new IntelGPU;
	Memory* intelMem = new IntelMemory;

	//创建第一台电脑
	Computer* computer1 = new Computer(intelCpu, intelGpu, intelMem);
	computer1->work();
	delete computer1;

	//第二台电脑组装
	printf("------------\n");
	printf("第二台电脑开始工作\n");
	Computer* computer2 = new Computer(new AMDCPU, new AMDGPU, new AMDMemory);
	computer2->work();
	delete computer2;
	
	//第三台电脑组装
	printf("------------\n");
	printf("第三台电脑开始工作\n");
	Computer* computer3 = new Computer(new AMDCPU, new IntelGPU, new AMDMemory);
	computer3->work();
	delete computer3;
}

int main()
{
	test01();

	system("pause");
	return 0;
}

//文件操作
// 程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被稀释
// 通过文件可以将数据持久化
// c++中对文件操作需要包含头文件<fstream>
// 
// 文件类型分为两种
// 1.文件类型	- 文件以文件ASCII码形式存储的计算机中
// 2.二进制文件	- 文件以文本二进制形式存储在计算机中，用户一般不能直接读懂它们
// 
// 操作文件的三大类
// 1.ofstream: 写操作
// 2.ifstream: 读操作
// 3.fstream : 读写操作
// 
// 文本文件
// 写文件
// 写文件步骤如下
// 1.头文件 - #include<fstream>
// 2.创建流对象 - ofstream ofs;
// 3.打开对象 - ofs.open("文件路径",打开方式);
// 4.写数据 - pfs << "写入的数据";
// 5.关闭文件 - ofs.close();
// 注意：文件打开方式可以配合使用，利用|操作符
// 列如：用二进制方式写文件， ios::binary | ios::out
//
//文件的打开方式
// ios::in		为读文件而打开
// ios::out		为写文件而打开
// ios::ate		初始位置：文件尾
// ios::app		追加方式写文件
// ios::trunc	如果文件存在先删除，在创建
// ios::binary	二进制方式

//总结：
// 文件操作必须包含头文件fstream
// 读文件可以利用ofstream，或者fstream类
// 打开文件时侯需要指定操作文件的路径，以及打开方式
// 利用<<可以向文件中写数据
// 操作完毕，要关闭文件

//文本文件 写文件
void test01()
{
	//1.包含头文件fstream

	//2.创建数据流对象ofstream
	ofstream ofs;

	//3.指定打开方式
	ofs.open("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\人数表.txt", ios::out);

	//4.些内容
	ofs << "姓名：张三" << endl;
	ofs << "性别：男" << endl;
	ofs << "年龄：18" << endl;

	//5、关闭文件
	ofs.close();


}

int main()
{


	system("pause");
	return 0;
}

//读文件
//读文件与写文件步骤相似，但是读取方式相对于比较多
//步骤略(就是ofs变成ifs)
//但读取有4种方式
//总结
//读文件可以利用ifstream，或者fstream类
// 利用is_open函数可以判断文件是否打开成功
// close关闭文件
//

//文本文件的读文件
void test01()
{
	//包含头文件

	//创建流
	ifstream ifs;

	//打开文件 并且判断是否打开成功
	ifs.open("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\人数表.txt", ios::in);

	//判断
	if (ifs.is_open())
	{
		printf("打开成功\n");
	}
	else
	{
		printf("打开失败\n");
		return;
	}

	//读数据(4种)
	
	//第一种
	//char buf[1024] = { 0 };
	//while (ifs >> buf)
	//{
	//	cout << buf << endl;
	//}
	
	//第二种
	//char buf[1024] = { 0 };
	//while (ifs.getline(buf,1024))
	//{
	//	cout << buf << endl;
	//}

	//第三种
	//string buf;
	//while (getline(ifs,buf))
	//{
	//	cout << buf << endl;
	//}
	
	//第四种(全读取，会读取到文件尾，也就是EOF)
	char c;
	while (( c = ifs.get()) != EOF)//EOF end of file (文件尾)
	{
		cout << c;
	}

	//关闭
	ifs.close();

}

int main()
{
	test01();
	system("pause");
	return 0;
}

//二进制文件
//打开方式要指定为ios::binary
//写文件
// 二进制方式写文件主要利用流对象调用成员函数write
// 函数原型：ostream& write(counst char* buffer, int len)
// 参数解释：字符指针buffer指向内存中一段内存空间，len是读写的字节数
//
//class Person
//{
//public:
//
//	char m_Name[64];//姓名
//	int m_Age;//年龄
//
//private:
//
//};
//
//
//void test01()
//{
//	//包含头文件
//	// 创建流对象
//	ofstream ofs("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\person.txt", ios::out | ios::binary);
//
//	//打开文件
//	//ofs:open("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\person.txt",ios::out | ios::binary);//可以和数据流一起写两步合成一步
//
//	// 写文件
//	Person p = { "张三", 18 };
//	ofs.write((const char*)&p, sizeof(Person));
//
//	// 关闭文件
//	ofs.close();
//	
//}
//
//int main()
//{
//
//
//	test01();
//
//	system("pause");
//	return 0;
//}

//二进制读文件
// 二进制方式读文件主要利用流对象调用成员函数read
// 函数原型：istrem& read(char* buffer, int len);
// 参数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数

class Person
{
public:

	char m_Name[64];//姓名
	int m_Age;//年龄

private:

};

void test01()
{
	//包含头文件
	//创建数据流/打开文件 判断文件是否打开成功
	ifstream ifs("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\person.txt", ios::in | ios::binary);

	if (ifs.is_open())
	{
		cout << "打开成功" << endl;
	}
	else
	{
		cout << "打开失败" << endl;
		return;
	}

	//读文件
	Person p;
	ifs.read((char*)&p, sizeof(Person));

	cout << "姓名:" << p.m_Name << "\n年龄:" << p.m_Age << endl;

	//关闭文件
	ifs.close();
	
}

int main()
{
	test01();

	system("pause");
	return 0;
}
