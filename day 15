#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<iostream>
#include<string>
using namespace std;

//案列3 - 电脑组装
//抽象类
//抽象cpu
class CPU
{
public:
	CPU();
	~CPU();
	//抽象的显示函数
	virtual void calculate() = 0;

};

CPU::CPU()
{
}

CPU::~CPU()
{
}

//抽象gpu
class GPU
{
public:
	GPU();
	~GPU();
	virtual void display() = 0;

};

GPU::GPU()
{
}

GPU::~GPU()
{
}

//抽象内存
class Memory
{
public:
	Memory();
	~Memory();
	virtual void storage() = 0;
};

Memory::Memory()
{
}

Memory::~Memory()
{
}

//具体厂商
class IntelCPU :public CPU
{
	void calculate()
	{
		printf("这是英特尔的cpu\n");
	}
};

class IntelGPU :public GPU
{
	void display()
	{
		printf("这是英特尔的Gpu\n");
	}
};

class IntelMemory :public Memory
{
	void storage()
	{
		printf("这是英特尔的内存条\n");
	}
};

//AMD厂商
class AMDCPU :public CPU
{
	void calculate()
	{
		printf("这是AMD的cpu\n");
	}
};

class AMDGPU :public GPU
{
	void display()
	{
		printf("这是AMD的gpu\n");
	}
};

class AMDMemory :public Memory
{
	void storage()
	{
		printf("这是AMD的内存\n");
	}
};

class Computer
{
public:
	Computer(CPU* cpu, GPU* gpu, Memory* mem);
	//提供析构函数释放电脑零件
	~Computer();

	//工作的函数
	void work()
	{
		//让零件工作起来，调用接口
		m_cpu->calculate();
		m_gpu->display();
		m_mem->storage();
	}

private:
	CPU* m_cpu;//cpu的零件指针
	GPU* m_gpu;//gpu的零件指针
	Memory* m_mem;//内存的零件指针

};

Computer::Computer(CPU* cpu, GPU* gpu, Memory* mem)
{
	m_cpu = cpu;
	m_gpu = gpu;
	m_mem = mem;
}

Computer::~Computer()
{
	if (m_cpu != NULL)
	{
		delete m_cpu;
		m_cpu = NULL;
	}
	if (m_gpu != NULL)
	{
		delete m_gpu;
		m_gpu = NULL;
	}
	if (m_mem != NULL)
	{
		delete m_mem;
		m_mem = NULL;
	}
}

void test01()
{
	//第一台电脑零件
	CPU* intelCpu = new IntelCPU;
	GPU* intelGpu = new IntelGPU;
	Memory* intelMem = new IntelMemory;

	//创建第一台电脑
	Computer* computer1 = new Computer(intelCpu, intelGpu, intelMem);
	computer1->work();
	delete computer1;

	//第二台电脑组装
	printf("------------\n");
	printf("第二台电脑开始工作\n");
	Computer* computer2 = new Computer(new AMDCPU, new AMDGPU, new AMDMemory);
	computer2->work();
	delete computer2;
	
	//第三台电脑组装
	printf("------------\n");
	printf("第三台电脑开始工作\n");
	Computer* computer3 = new Computer(new AMDCPU, new IntelGPU, new AMDMemory);
	computer3->work();
	delete computer3;
}

int main()
{
	test01();

	system("pause");
	return 0;
}
