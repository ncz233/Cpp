#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
using namespace std;

//queue容器
//概念
// queue是一种先进后出(first in First out fifo)的数据结构,它有两个出口 - (简称队列)
// 队列容器允许从一端新增元素,另一端移除元素
// 队列中只有对头和队尾才可以被外界使用,因此队列不允许有遍历行为
// 队列中进数据称为 - 入队 - push
// 队列中出数据称为 - 出队 - pop
// 
// 常用接口 - 队列容i去常用的对外接口
// 构造函数
// queue<T>	que;	//queue采用模板类实现,queue对象的默认构造形式
// queue(const queue $que);	//拷贝构造函数
// 赋值操作
// queue& operator=(const queue &que);	//重载符号操作
// 数据存储
// push(elem);	//往队尾添加元素
// pop();	//从对头移除第一个元素
// back();	//返回最后一个元素
// front();	//返回第一个元素
// 大小操作
// empty();	//判断队列是否为空
// size();	//返回队列的大小
// 
//总结
// 入队 - push
// 出队 - pop
// 返回对头元素 - front
// 返回队尾元素 - back
// 判断队是否为空 - empty
// 返回队列大小 - size

//队列
class Person
{
public:
	Person(string name,int age);
	~Person();

	string m_Name;
	int m_Age;

};

Person::Person(string name, int age)
{
	this->m_Name = name;
	this->m_Age = age;
}

Person::~Person()
{
}

void test01()
{
	//创建队列
	queue<Person>q;

	//准备数据
	Person p1("小黑", 10);
	Person p2("小白", 11);
	Person p3("小绿", 12);
	Person p4("小宏", 13);

	//入队
	q.push(p1);
	q.push(p2);
	q.push(p3);
	q.push(p4);

	cout << "前队列的大小 = " << q.size() << endl;

	//判断是否为空,不为空看队头队尾
	while (!q.empty())
	{
		//队头
		cout << "队头 = " << q.front().m_Name << "\t年龄 = " << q.front().m_Age << endl;

		//队尾
		cout << "队尾 = " << q.back().m_Name << "\t年龄 = " << q.back().m_Age << endl;

		//出队
		q.pop();
	}
	cout << "后队列的大小 = " << q.size() << endl;

}

int main()
{
	test01();

	system("pause");
	return 0;
}
