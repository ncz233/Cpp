//指针 - C一样
//指针的基本概念
// 指针的作用：可以通过指针间接访问内存
// 内存编号时从0开始记录的，一般用十六进制数字表示
// 可以利用指针变量保存地址
//指针变量的定义与使用
// 指针变量定义：int* 变量名
//

//int main()
//{
//	//1.定义一个指针
//	int a = 10;
//	//记录变量a的地址
//	int* p = &a;
//	cout <<"a的地址 = "<< &a << endl;
//	cout <<"指针p的地址 = " << p << endl;
//
//	//2.使用指针
//	//可以通过解引用("*")的方式来找到指针指向的内存
//	//指针前加上*代表解引用，找到指针指向的内存中的数据
//	*p = 20;
//	cout << "a的值 = " << a << endl;
//	cout << "p的值 = " << *p << endl;
//
//	system("pause");
//	return 0;
//}

//指针所占的空间 - C一样
//32位系统4字节，64位系统8字节

//int main()
//{
//	//指针所占的内存
//	int a = 10;
//	int* p = &a;
//	cout << sizeof(int*) << endl;
//	cout << sizeof(double*) << endl;
//
//	system("pause");
//	return 0;
//}

//空指针和野指针 - (释放内存的时候这个指针就是野指针了，要赋值空指针才行，不然访问会崩溃(崩溃了，你都不知道哪里错了)。但是访问空指针会报错）
//指针变量指向内存中编号为0的空间(0~255是操作系统的)
//用途初始化指针变量
// 注意空指针指向的内存是不可以访问的
//野指针 - 指针变量指向非法的内存空间 - 就是指向不是我给他申请的空间
//总结：空指针和野指针都不是我们申请的空间，因此不要访问

//int main()
//{
//	//空指针
//	//1.用于给指针变量初始化
//	int* p = NULL;//给个内存编号0的地址
//
//	//空指针是不可以进行访问的
//	//因为0 ~ 255之间的内存编号是系统占用的，因此不可以访问
//	*p = 10;//这里取消对p指针的引用了
//
//	//野指针 - 指针变量指向非法的内存空间 - 就是指向不是我给他申请的空间
//	//在我们的程序中，尽量避免出现野指针，非常危险
//	int* p = (int*)0x1100;//这块地址我没有去申请，等于我没有权限，所以我访问(操作*p)会报错
//
//	cout << *p << endl;//错了
//
//	system("pause");
//	return 0;
//}

//const修饰指针 - C一样
// 三种情况 - const的右边是谁，谁就不能改，反之另一个可以改
// const修饰指针 --常量指针
// const修饰常量 --指针常量
// const即修饰指针，又修饰常量
//记的技巧 - 翻译成中文就可以理解了，
// 还有const修饰了 int(类型)*, 那*p(指针变量)!=20(值)就不可以修改(就是解引用会用到*不可以改)
// 如果const修饰了 p(变量)，那p!=&a(地址)就不可以修改(就是这个p地址不可修改)

int main()
{
	int a = 10;
	int b = 20;

	// const修饰指针 --常量指针
	//特点 - 指针指向可以修改，但是指针指向的值不可以改(仅仅是这个指针。跟内存没关系也就是说，在定义一个普通指针指向这个地址，这个地址可以改)
	const int* p = &a;
	//*p = 20;//指针的值不可以改
	//p = &b;//指针指向对象可以改
	printf("%d\n", *p);
	int* p1 = &a;
	*p1 = 50;
	printf("%d\n", *p);
	p = &b;//指针指向对象可以改
	printf("%d\n", *p);
	printf("%d\n", *p1);//因为他们都是指向同一块地址，所以地址一样

	// const修饰常量 --指针常量
	//特点 - 指针的指向不可以改，指针指向的值可以改
	int* const p1 = &a;
	//*p1 = 20;//值可以改
	//*p1 = &b;//对象不能改

	// const即修饰指针，又修饰常量
	//特点 - 指针的指向不可以改，指针指向的值不可以改
	const int* const p2 = &a;
	//*p = 20;//值不可以改
	//p = &b;//对象不可以改

	system("pause");
	return 0;
}
