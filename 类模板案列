#define _CRT_SECURE_NO_WARNINGS 1
#include"MyArray.hpp"

//相关案列
//实现通用的数组类
//要求
// 可以存放自定义数据类型
// 存放到堆区
// 构造函数中可以传入数组的容量
// 提供对应的拷贝构造函数,以及防止浅拷贝问题
// 提供尾插法和尾删法
// 可以通过下标方式访问中间元素
// 可以获取数组中当前元素个数和数组的容量
//
//总结:能够利用所学的知识点实现通用的数组,虽然不是链表,(我感觉我链表白学了,只会用结构体不知道C++中该怎么用)

void printIntArray(MyArray<int> &arr)
{
	for (int i = 0; i < arr.getSize(); i++)
	{
		cout << arr[i] << endl;
	}

}

void test01()
{
	MyArray<int> arr1(5);

	for (int i = 0; i < 5; i++)
	{
		arr1.Push_Back(i);
	}
	cout << "arr1打印" << endl;
	printIntArray(arr1);

	cout << "arr1容量" << arr1.getCapacity() << endl;
	cout << "arr1大小" << arr1.getSize() << endl;

	MyArray<int> arr2(arr1);
	cout << "arr2打印" << endl;
	printIntArray(arr2);

	//尾删
	arr2.Pop_Back();
	cout << "尾删后大小" << endl;
	cout << "arr2容量" << arr2.getCapacity() << endl;
	cout << "arr2大小" << arr2.getSize() << endl;

	//MyArray<int> arr2(arr1);

	//MyArray<int> arr3(100);
	//arr3 = arr1;
}

//测试自定义数据类型
class Person
{
public:
	Person(){};//需要默认构造函数的原因是:创建数组的时候,数组中的每个默认元素都是使用默认构造创建出来的,所以需要默认构造
	//可能使用到了模板,也可能是自己写一个有参,系统不会提供默认,但一会开辟空间需要一个无参构造,所以自己再写一个无参构造
	Person(string name, int age);
	~Person();

	string m_Name;
	int m_Age;
};

Person::Person(string name, int age)
{
	this->m_Name = name;
	this->m_Age = age;
}

Person::~Person()
{
}

//打印
void printPersonArray(MyArray<Person> &arr)
{
	for (int i = 0; i < arr.getSize(); i++)
	{
		cout << "name:" << arr[i].m_Name << "\tage:" << arr[i].m_Age << endl;
	}

}


void test02()
{
	MyArray<Person> arr(10);

	Person p1("先辈", 24);
	Person p2("阿伟", 19);
	Person p3("杰哥", 30);
	Person p4("彬彬", 20);
	
	//将数组插入到数组中
	arr.Push_Back(p1);
	arr.Push_Back(p2);
	arr.Push_Back(p3);
	arr.Push_Back(p4);

	//打印
	printPersonArray(arr);

	//容量
	cout << "容量" << arr.getCapacity() << endl;

	//大小
	cout << "大小" << arr.getSize() << endl;
}

int main()
{
	//test01();

	test02();

	system("pause");
	return 0;
}

-----------------------------------------------------.hpp

#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<string>
#include<stdio.h>
using namespace std;

template<class T>
class MyArray
{
public:
	MyArray(int capacity);
	MyArray(const MyArray& arr)
	{
		cout << "myarray拷贝构造调用" << endl;
		this->m_Size = arr.m_Size;
		this->m_Capacity = arr.m_Capacity;
		//this->pAddress = arr.pAddress;//老问题浅拷贝问题
		
		//深拷贝
		this->pAddress = new T[arr.m_Capacity];

		//将arr中的数据都拷贝过来
		for (int i = 0; i < this->m_Size; i++)
		{
			this->pAddress[i] = arr.pAddress[i];
		}
	}

	//operator= 防止浅拷贝问题, 函数重载=,提示:链式编程
	MyArray& operator=(const MyArray& arr)
	{
		cout << "myarray的operator=调用" << endl;
		//判断原来的堆区是否有数据,如果有先释放
		if (this->pAddress != NULL)
		{
			delete[] this->pAddress;
			this->pAddress = NULL;
			this->m_Capacity = 0;
			this->m_Size = 0;
		}

		//深拷贝
		this->m_Capacity = arr.m_Capacity;
		this->m_Size = arr.m_Size;
		this->pAddress = new T[arr.m_Capacity];
		for (int i = 0; i < this->m_Size; i++)
		{
			this->pAddress[i] = arr.pAddress[i];
		}
		return *this;
	}

	//尾插法
	void Push_Back(const T& val)
	{
		//判断容量是否等于大小
		if (this->m_Capacity == this->m_Size)
		{
			cout << "满了" << endl;
			return;
		}
		this->pAddress[this->m_Size] = val;//尾插
		this->m_Size++;//更新大小
	}

	//尾删
	void Pop_Back()
	{
		//让用户访问不到最后一个元素,逻辑删除
		if (this->m_Size == 0)
		{
			cout << "没数了" << endl;
			return;
		}
		this->m_Size--;
	}

	//通过下标方式访问元素
	T& operator[](int index)
	{

		return this->pAddress[index];
	}

	//返回数组容量
	int getCapacity()
	{
		return this->m_Capacity;
	}

	//返回数组大小
	int getSize()
	{
		return this->m_Size;
	}

	~MyArray();

private:
	T* pAddress;//堆区开辟的数组
	int m_Capacity;//容量
	int m_Size;//数组大小
};

template<class T>
MyArray<T>::MyArray(int capacity)
{
	cout << "myarray有参构造调用" << endl;
	this->m_Capacity = capacity;
	this->m_Size = 0;
	this->pAddress = new T[this->m_Capacity];
}

template<class T>
MyArray<T>::~MyArray()
{
	if (this->pAddress != NULL)
	{
		cout << "myarray析构造调用" << endl;

		delete[] this->pAddress;
		this->pAddress = NULL;
	}
}
