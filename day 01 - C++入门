#define _CRT_SECURE_NO_WARNINGS 1
//  阶段   -    内容     -                   目标                 -    案列
//第一阶段 - C++基础语法入门 - 对C++有初步了解，能够有基础编程能力 - 通讯录管理系统
//第二阶段 - C++核心变成 - 介绍C++面向对象编程，为大型项目做铺垫 - 职工管理系统
//第三阶段 - C++提高编程 - 介绍C++泛型编程思想，以及STL的基本使用 - 演讲比赛系统
// 综合大型案列 - 机房预约系统

//1.初识C++
// 第一个项目 - 简单不写了
//  创建项目
//  创建文件
//  编写代码
//  运行程序
//

#include<iostream>//差不多跟C语言中的库函数差不多
using namespace std;

/*
	main 函数是一个程序的入口
	每个程序都必须有这么一个函数
	有且只有一个
*/
//int main()
//{
//	//记得注释要写在上面	
//	cout << "hello world" << endl;//和C语言中的printf差不多
//	system("pause");
//	return 0;
//}

//注释 - 给人看的 - 和C语言一模一样 - 记得注释要写在代码的上面
//信息 和 /*信息*/

//变量 - 和C语言一模一样
//作用 - 给一段指定的内存空间起名，方便操作这段内存
//变量存在的意义 - 方便我们管理内存空间
//变量创建语法：数据类型 变量名 = 变量初始值;
// int a = 10；

//int main()
//{
//	//变量创建语法：数据类型 变量名 = 变量初始值;
//	int a = 10;
//	cout << "a = " << a << endl;
//	system("pause");
//	return 0;
//}

//常量 - 和C语言一模一样 - 一个是define修饰的常量。一个是const修饰的常变量，就是栈区的变成静态区的了
//作用 - 用于记录程序中不可更改的数据
// 两种定义方式
//  #define 宏常量 - #define 常量名 常量值
//   通常在文件上方定义，表示一个常量
//  const修饰的变量 - const 数据类型 常量名 = 常量值
//   通常在变量定义前加关键字const，修饰该变量为常量，不可修改 - 就算出函数也是会保存的

//1.define修饰的常量
//#define DAY 7//全局变量时候记得要大写define是在执行程序的时候找到这个名字(也就是DAY)然后替换成后面的内容(也就是7)，所以加分号是不行的
//int main()
//{
//	//DAY = 14;//这样是不行的，常量是不可修改的，一旦修改就会报错
//	cout << "一周多少天= " << DAY << endl;
//
//	//2.const修饰的常变量，一般是写在函数内部的
//	const int month = 12;
//	//month = 24;//错误，const修饰的变量称为常变量
//	cout << "一年有多少月份= " << month << endl;
//
//	system("pause");
//	return 0;
//}

//关键字
//作用：关键字是C++中预先保留的单词(标识符)
// 在定义变量或者常量时候，不要用关键字
//再给变量或常量起名称时候，不要用C++中的关键字，否则会产生歧义

//int main()
//{
//	//创建变量
//	//不要用关键字给变量或者常量起名称
//	int a = 10;
//	//int int = 20;//错误的，第二个int是个关键字，不可以作为变量的名称
//
//	system("pause");
//	return 0;
//}

//标识符命名规则 - 驼峰式命名
//作用 - C++规定给标识符(变量，常量)命名时，有一套自己的规则
// 标识符不能是关键字
// 标识符只能由字母、数字、下划线组成
// 第一个字符必须是字母或下划线
// 标识符中字母区分大小写
//建议：给变量起名的时候，最好能够做到见名知意 - 就是代码可读性

//int main()
//{
//	// 标识符不能是关键字
//	//int int = 20;
//
//	// 标识符只能由字母、数字、下划线组成
//	int abc = 10;
//	int _abc = 20;
//	int _123abc = 30;
//
//	// 第一个字符必须是字母或下划线
//	//int 123abc = 40;
//
//	// 标识符中字母区分大小写
//	int aaa = 100;
//	//cout << AAA << endl;//AAA和aaa不是同一个名称
//
//	//建议：给变量起名的时候，最好能够做到见名知意 - 就是代码可读性
//	int num1 = 10;
//	int num2 = 20;
//	int sum = num1 + num2;
//	cout << sum << endl;
//
//	system("pause");
//	return 0;
//}

//数据类型 - 整型
//C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存
//意义 - 给变量分配合适的内存空间
// short - 2字节 - 范围:-2^15--2^15-1
// int - 4字节 - 范围:-2^31--2^31-1
// long - win为4，linux为4(32位)、8(64位) - 范围:-2^31--2^31-1
// long long - 8字节 - 范围:-2^63--2^63-1
// 注意:因为有0的存在所以-1
// 区别在于所占内存空间不同
//各类型变量表示的是这个类型的数据
//日常开发中int是最常用的

//int main()
//{
//	//整型
//	//1.短整型(-32768 - 32767)
//	short num1 = 32768;//看补码
//	//2.整型(-65535 - 65534)
//	int num2 = 32768;
//	//3.长整型
//	long num3 = 10;
//	//4.长长整型
//	long long num4 = 10;
//
//	cout << "num1 = " << num1 << endl;
//	cout << "num2 = " << num2 << endl;
//	cout << "num3 = " << num3 << endl;
//	cout << "num4 = " << num4 << endl;
//
//	system("pause");
//	return 0;
//}

//sizeof关键字(单位是字节) - 和C语言用法一模一样
//作用 - 利用sizeof关键字可以统计数据类型所占内存大小
//语法 - sizeof(数据类型/变量)

//int main()
//{
//	//整型：short(2)  int(4)  long(4)  long long(8)
//	//可以利用sizeof求出数据类型占用内存大小
//	//语法 - sizeof(数据类型/变量)
//
//	short num1 = 10;//变量创建的时候就已经指定了
//	cout << "short占用的内存空间 = " << sizeof(num1) << endl;//变量也行
//
//	int num2 = 10;
//	cout << "short占用的内存空间 = " << sizeof(int) << endl;
//
//	long num3 = 10;
//	cout << "short占用的内存空间 = " << sizeof(num3) << endl;
//
//	long long num4 = 10;
//	cout << "short占用的内存空间 = " << sizeof(long long) << endl;
//	
//	//整型比较大小
//	//short < int <= long <= long long
//
//	system("pause");
//	return 0;
//}

//数据类型 - 实型(浮点数 - 也称为小数)
//作用:用于表示小数
// 浮点型变量分为两种
//  单精度float
//  双精度double
//两者区别在于表示的有效数字范围不同
//float - 4字节 - 7位有效数字
//double - 8字节 - 15--16位有效数字
//默认情况下，输出一个小数，会显示出6位有效数字，要想显示后面的后面在学

int main()
{
	//实型
	//1.单精度 - float
	float f1 = 3.1415926f;//为什么写f呢，因为创建小数的时候不管是用float或者double创建的默认都是以double形式产生的,如果要确定一个值就在它后面加f或者不加。
	//2.双精度 - double
	double d2 = 3.1415926;

	cout << "f1 = " << f1 << endl;
	cout << "d2 = " << d2 << endl;

	//统计float和double占用内存空间
	cout << "float = " << sizeof(f1) << endl;
	cout << "double = " << sizeof(double) << endl;

	//科学计数法 - 也可以用但是少 - 数先变成二进制然后进行科学计数法，然后前面0 10000000 00000000000000000000000，前面的0是符号位，中间的是科学计数法e后面的数，加了127因为是非负数，最后的是.后面的二进制数位，忽略了1因为必定是1忽略增加精准度
	float f2 = 3e2;//3*10^2;
	cout << "f2 = " << f2 << endl;

	float f3 = 3e-2;//3*0.1^2
	cout << "f3 = " << f3 << endl;

	system("pause");
	return 0;
}

