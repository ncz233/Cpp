#define _CRT_SECURE_NO_WARNINGS 1
//算法的头文件
#include<algorithm>//标准算法的头文件
#include<vector>

#include<stdio.h>
#include<iostream>
#include<string>
using namespace std;

//注意,指针是地址,指针的变量是变量.指针指向的对象是变量的地址或者是函数返回地址.解引用解出来的是指向的变量的值(也就是对方的值)

//复习之前的内容,面向对象的三大特性,封装继承多态
// 封装:类似结构体,
// 继承:继承父类的特性
// 多态:对象的不同调用同一接口会有不同的形态
//

//STL诞生
//长久以来,软件界一直希望建立一种可以重复利用的东西
// C++的面向对象和泛型编程思想,目的就是重复性的提升
// 大多数情况下,数据结构和算法都未能有一套标准,导致被迫从事大量重复工作
// 为了建立数据结构和算法一套标准,诞生了stl
// 
//stl基本概念
// stl(standard template library.标准模板)
// stl从广义上分为:容器(container)算法(algorithm)迭代器(iterator)
// 容器和算法之间通过迭代器进行无线连接
// stl几乎所有的代码采用了模板类或者模板函数
//
//stl六大组件
// stl大体分为六大组件,分别是容器,算法,迭代器,仿函数,适配器,空间适配器
// 容器: 各种数据结构,如vector,list,deque,set,map等,用来存放数据
// 算法: 各种常用的算法,如sort,find,copy,for_each等
// 迭代器: 扮演了容器与算法之阿金的胶合剂
// 仿函数: 行为类似函数,可作为算法的某种策略
// 适配器: 一种用来修饰容器或者仿函数和迭代器接口的东西
// 空间适配器: 负责空间的配置与管理
//
//详细说前三stl容器,算法,迭代器
// 容器:置物之所也
// stl容器就就是将运用最广泛的一些数据结构实现出来
// 常用的数据结构: 数组,链表,栈,队列,树,集合,映射表等
// 这些容器分为序列式容器和关联式容器两种:
// 序列式容器:强调值的排序,序列式容器中的每个元素均有固定的位置
// 关联式容器:二叉树结构,各元素之间没有严格的物理上的顺序关系
// 
// 算法:问题只解也
// 优先的步骤,解决逻辑和数学上的问题,这一门学科我们叫做算法(Algorithms)
// 算法分为:质变算法和非质变算法
// 质变算法:是指运算过程中会更改区间内的元素的内容,列如拷贝,替换,删除等等
// 非质变算法:是指运算过程中不会更改区间内的元素内容,列如查找,计数,遍历,寻找极值等等
// 
// 迭代器:容器和算法之间的粘合剂
// 提供一种方法,使能够依寻某个容器所含的各个元素,而又无需暴露该容器的内部表示方式.
// 每个容器都有自己专属的迭代器
// 迭代器使用类似于指针,初学者阶段我们可以先理解迭代器为指针
// 主要迭代器种类
// 双向迭代器	功能:读写操作,并能向前和向后	支持运算:读写,支持++ --
// 随机访问迭代器	功能:读写操作,可以以跳跃的方式访问任意数据,功能最强大迭代器	支持运算:读写,支持++ -- [n] -n < <= > >=
// 常用的容器中的迭代器种类为双向迭代器,随机访问迭代器 

//容器算法迭代器初识
//了解stl中容器,算法,迭代器概念之后,我们利用代码感受stl魅力
// stl中最常用的容器为vector,可以理解为数组,下面我们将学习如何向这个容器中插入数据,并遍历这个容器
// 
// vector存放内置容器类型
// 容器:vector
// 算法:for_each
// 迭代器:vector<int>::iterator
// 

//函数回调,打印数据
//void myPrint(int val)
//{
//	printf("%d\n", val);
//}
//
//void test01()
//{
//	//MyArray<int> v;//以前自己写的
//
//	//创建了一个vector容器,数组
//	//头文件#include<vector>
//	vector<int> v;
//
//	//向容器插入数据
//	v.push_back(10);
//	v.push_back(20);
//	v.push_back(30);
//
//	//通过迭代器访问容器中的数据
//	//vector<int>::iterator itBegin = v.begin();//起始迭代器, 指向容器中第一个元素
//	//vector<int>::iterator itEnd = v.end();//结束迭代器, 指向容器中最后一个元素的下一个位置
//
//	////第一种遍历方式
//	//while (itBegin != itEnd)
//	//{
//	//	cout << *itBegin++ << endl;
//	//	//itBegin++;
//	//}
//
//	//第二种也是比较常用的遍历方式
//	//for (vector<int>::iterator it = v.begin(); it < v.end(); it++)//小知识:it解引用出来的是vector<int>的<>内的类型,所以是int类型,记住这个是类似于指针,并不是指针
//	//{
//	//	cout << *it << endl;
//	//}
//
//	//第三种遍历方式利用stl提供的遍历算法,头文件
//	for_each(v.begin(), v.end(), myPrint);
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//vector容器中存放自定以数据类型

//class Person
//{
//public:
//	Person(string name, int age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//	
//	string m_Name;
//	int m_Age;
//};
//
//void test01()
//{
//	vector<Person> v;
//	Person p1("a", 10);
//	Person p2("b", 20);
//	Person p3("c", 30);
//
//	//像容器中插入数据
//	v.push_back(p1);
//	v.push_back(p2);
//	v.push_back(p3);
//
//	//遍历
//	for (vector<Person>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		//cout << "name:" << (*it).m_Name << "\tage:" << (*it).m_Age << endl;//因为功能类似于指针所以可以用指针的方式访问
//		cout << "name:" << it->m_Name << "\tage:" << it->m_Age << endl;
//	}
//}
//
////存放自定义数据类型的指针
//void test02()
//{
//	vector<Person*> v;
//	Person p1("a", 10);
//	Person p2("b", 20);
//	Person p3("c", 30);
//
//	//像容器中插入数据
//	v.push_back(&p1);
//	v.push_back(&p2);
//	v.push_back(&p3);
//
//	//遍历容器
//	for (vector<Person*>::iterator it = v.begin(); it < v.end(); it++)
//	{
//		cout << "name: " << (*it)->m_Name << "\tage: " << (*it)->m_Age << endl;
//	}
//
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//vector容器中嵌套容器
//类似于二维数组

void test01()
{

	vector<vector <int>>v;

	//创建小容器
	vector <int>v1;
	vector <int>v2;
	vector <int>v3;

	//向小容器中添加数据
	for (int i = 0; i < 3; i++)
	{
		v1.push_back(i + 1);
		v2.push_back(i + 2);
		v3.push_back(i + 3);
	}

	//将小容器插入到大容器中
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);

	//通过大容器,把所有的数据遍历一遍
	for (vector<vector<int>>::iterator it = v.begin(); it < v.end(); it++)
	{
		//(*it)---容器vector<int>
		for (vector<int>::iterator jt = (*it).begin(); jt < (*it).end(); jt++)
		{
			cout << *jt << " ";
		}
		cout << endl;
	}

}

int main()
{
	test01();
	//test02();

	system("pause");
	return 0;
}
