#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<stdio.h>
using namespace std;

//本阶段主要针对C++泛型编程和STL技术做详细讲解,探讨C++更深层的使用

//模板的概念
//模板就是建立通用的模具,大大提高复用性
// 列如生活中模板, 如ppt模板和一寸照片模板等等......
// 上面的列子共有的特点是:不能直接使用,不是万能的
//
//特点
// 模板不可直接使用,它只是一个框架
// 模板并不是万能的

//函数模板
// c++中一个编程思维称为泛型编程,主要利用的技术就是模板
// c++提供两种模板机制:函数模板和类模板
//
// 函数模板语法
// 函数模板作用
// 建立一个通用函数,其函数返回类型和形参类型可以不具体定制,用一个虚拟的类型代表
//
// 语法
// template<typename T>
// template -- 声明
// typename -- 表明后面的符号是一种数据类型,可以用class代替
// T -- 通用的数据类型,名称可以替换,通常为大写字母
//
//总结:
// 函数模板利用关键子tempplate
// 使用函数模板有两种方式:自动推到\显示指定类型
// 模板的目的是为了提高复用性,将类型参数化
//

//两个整型交换的函数
void swapInt(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}

//交换两个浮点数的函数
void swapDouble(double& a, double& b)
{
	double temp = a;
	a = b;
	b = temp;
}

//上面的交换函数,逻辑上不能说极其相似,只能说一模一样,用到了函数模板
//函数模板
template<typename T>//声明一个模板,告诉编译器后面代码中紧跟这的t不要报错,t是一个通用的数据类型
void mySwap(T& a, T& b)//使用的时候指定它
{
	T temp = a;
	a = b;
	b = temp;
}

void test01()
{
	int a = 10;
	int b = 20;

	//swapInt(a, b);
	//利用函数模板来交换
	//2中方式
	// 1.自动类型推到(传进去的是什么类型就是什么类型)
	// mySwap(a, b);
	// 2.显示指定类型()
	mySwap<int>(a, b);
	printf("a = %d\nb = %d\n", a, b);

	//double c = 1.1;
	//double d = 2.2;
	//printf("c = %f\nd = %f\n", c, d);
}

int main()
{
	test01();
	system("pause");
	return 0;
}
