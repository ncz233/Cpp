#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;

//string基本概念
//本质: string是C++风格的字符,而string的本质上是一个类
// string和char*区别
// char*是个指针
// string是个类,类内部封装了char*,管理这个字符串,是一个char*型的容器
// 特点
// string类内部封装了很多成员方法
// 列如,查找find,拷贝copy,删除delete,替换replace,插入insert
// string管理char*所分配的内存,不用担心复制越界和取值越界等,由类内部进行负责
// 
// string构造函数
// string();	//创建一个空的字符串,列如:string str;
// string(const char* s);	//使用字符串s初始化
// string(const string& str);	//使用一个string对象初始化另一个string对象
// string(int n, char c);	//使用n个字符,初始化;
// 
// 总结:string的多种构造方式没有可比性,灵活使用即可

//void test01()
//{
//	string s1;
//	const char* str = "hello world";
//
//	string s2(str);
//	cout << "s2 = " << s2 << endl;
//
//	string s3(s2);
//	cout << "s3 = " << s3 << endl;
//
//	string s4(10, 'a');
//	cout << "s4 = " << s4 << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string赋值操作
// 赋值的函数原型
// string& operator=(const char* s);	//char*类型字符串 赋值给当前的字符串
// string& operator=(const string &s);	//把字符串s赋给当前的字符串
// string& operator=(char s);	//字符赋值给当前字符串
// string& assign(const char *s);	//把字符串s赋值给当前的字符串
// string& assign(const char *s, int n);	//把字符串s的当前n个字符赋给当前的字符串
// string& assign(const string &s);	//把字符串s赋给当前字符串
// string& assign(int n, char c);	//用n个字符c赋给当前字符串
//

//void test01()
//{
//	string str1;
//	str1 = "hello world";
//	cout << "str1 = " << str1 << endl;
//
//	string str2;
//	str2 = str1;
//	cout << "str2 = " << str2 << endl;
//
//	string str3;
//	str3 = 'a';
//	cout << "str3 = " << str3 << endl;
//
//	string str4;
//	str4.assign("hello C++");
//	cout << "str4 = " << str4 << endl;
//
//	string str5;
//	str5.assign("hello C++", 5);
//	cout << "str5 = " << str5 << endl;
//
//	string str6;
//	str6.assign(str5);
//	cout << "str6 = " << str6 << endl;
//
//	string str7;
//	str7.assign(10, 'w');
//	cout << "str7 = " << str7 << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string字符串拼接
//实现字符串末尾拼接字符串
// 
// 函数原型
// string& operator+=(const char* str);	//重载+=操作符
// string& operator+=(const char c);	//重载+=操作符
// string& operator+=(const string* str);	//重载+=操作符
// string& append(const char* s);	//把字符串s连接到当前字符串结尾
// string& append(const char* s, int n);	//把字符串s的前n个字符连接到当前字符串结尾
// string& append(const strig& s);	//同operator+=(const string& str);
// string& append(const string &s, int pos, int n);	//字符串s中从pos开始的n个字符链接到字符串结尾
// 

//void test01()
//{
//	string str1 = "我";
//	str1 += "爱玩游戏";
//	cout << "str1 = " << str1 << endl;
//
//	str1 += ';';
//	cout << "str1 = " << str1 << endl;
//
//	string str2 = "lol, csgo";
//	str1 += str2;
//	cout << "str1 = " << str1 << endl;
//
//	string str3 = "I";
//	str3.append(" love ");
//	cout << "str3 = " << str3 << endl;
//
//	str3.append("game cccp", 5);
//	cout << "str3 = " << str3 << endl;
//
//	//这两个是一块的,用一个另一个不能用
//	//str3.append(str2);
//	//str3.append(str2, 0, 3);//直截取lol, 参数2 从那个位置截取 参数3 截取字符个数
//	str3.append(str2, 5, 4);//直接去csgo
//	cout << "str3 = " << str3 << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string查找和替换
//功能描述
// 查找: 查找指定字符串是否存在
// 替换: 在指定的位置替换字符串
// 
// 函数原型
// int find(const string& str, int pos = 0)const;	//查找str第一次出现的位置,从pos开始查找
// int find(const char* s, int pos = 0)const;	//查找s第一次出现的位置,从pos开始查找
// int find(const char* s, int pos, int n)const;	//查找s第一次出现的位置,从pos开始查找
// int find(const char c, int pos = 0)const;	//查找c第一次出现的位置
// int rfind(const string& str, int pos = npos)const;	//查找str最后一次位置,从pos开始查找
// int rfind(const char* str, int pos = npos)const;	//查找s最后一次出现的位置,从pos开始查找
// int rfind(const char* s, int pos, int n)const;	//查找s第一次出现的位置,从pos开始查找
// int rfind(const char c, int pos = 0)const;	//查找c最后一次出现的位置
// string& replace(int pos, int n, const string& str);	//替换从pos开始第n个字符为字符串str
// string& replace(int pos, int n, const char* s);	//替换从pos开始第n个字符为字符串s
//
//总结
//find查找是从左往右.rfind从右往左
// find找到字符串后返回查找的第一个字符位置,找不到返回-1
// replace在替换时,要制定从哪个位置起,多少个字符,替换成为什么样的字符串

////查找
//void test01()
//{
//	string str1 = "abcdefgde";
//	int pos = str1.find("df");
//	if (pos == -1)
//	{
//		cout << "未找到" << endl;
//	}
//	else
//	{
//		cout << "找到位置pos = " << pos << endl;
//	}
//
//	//rfind 和 find 区别
//	//rfind从右往左查找  find从左往右查找 但返回的数字都是从左往右数
//	pos = str1.rfind("de");
//	cout << "找到位置pos = " << pos << endl;
//}
//
////替换 
//void test02()
//{
//	string str1 = "abcdefg";
//
//	//从1号位置起 到 3号位置 替换为"1111"
//	str1.replace(1, 3, "1111");
//	cout << "str1 = " << str1 << endl;
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//string字符串比较 - 字符串之间的比较
//比较方式
// 字符串比较方式是按字符的ASCII码进行对比
// =返回	0
// >返回	1
// <返回	-1
//
// 函数原理
// int compare(const string& s)const; //与字符串s比较
// int compare(const char* s)const; //与字符串s比较
//
//总结: 字符串对比主要是用于比较两个字符串是否相等,判断谁大谁小的意义并不是很大

//void test01()
//{
//	string str1 = "hello";
//	string str2 = "xello";
//	if (str1.compare(str2) == 0)
//	{
//		cout << "str1 等于 str2" << endl;
//	}
//	else if (str1.compare(str2) > 0)
//	{
//		cout << "str1 大于 str2" << endl;
//
//	}
//	else
//	{
//		cout << "str1 小于 str2" << endl;
//	}
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string字符存取
// string中单个字符存取方式有两种
// char& operator[](int n);	//通过[]方式取字符
// char& at(int n);	//通过at方法获取字符
//

//string 字符存取
//void test01()
//{
//	string str = "hello";
//	cout << "str = " << str << endl;
//
//	//通过[]访问单个字符
//	for (int i = 0; i < str.size(); i++)
//	{
//		cout << str[i] << " ";
//	}
//	cout << endl;
//
//	//通过at方式访问单个字符
//	for (int j = 0; j < str.size(); j++)
//	{
//		cout << str.at(j) << " ";
//	}
//	cout << endl;
//
//	//修改单个字符
//	str[0] = 'x';
//	//xello
//	cout << "str = " << str << endl;
//
//	str.at(1) = 'x';
//	//xxllo
//	cout << "str = " << str << endl;
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string 插入和删除 对string字符串进行窜入和删除字符操作
//函数原型
//string& insert(int pos, const char* s);	//插入字符串
//string& insert(int pos, const string& s);	//插入字符串
//string& insert(int pos, int n, char c);	//在指定位置插入n个字符c
//string& erase(int pos, int n = npos);	//删除从pos开始的n个字符
//
//总结: 插入和删除的起始位置下标都是从0开始

//字符串 插入和删除
//void test01()
//{
//	string str = "hello";
//	
//	//插入
//	str.insert(1, "111");
//	cout << "Str = " << str << endl;
//
//	//删除
//	str.erase(1, 3);
//	cout << "Str = " << str << endl;
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//string字串 从字符串中获取想要的字串
//函数原型
// string substr(int pos = 0, int n = npos)const;	//返回由pos开始的n个字符组成的字符串
//总结: 灵活的运用求字串功能, 可以在实际开发中获取有效的信息

//string 求字串
void test01()
{
	string str = "abcdef";

	string subStr = str.substr(1, 3);

	cout << "subStr = " << subStr << endl;
}

//实用操作
void test02()
{
	string email = "lisi@sina.com";

	//从邮件的地址中 获取 用户名信息
	int pos = email.find("@");//8
	//cout << pos << endl;

	string userName = email.substr(0, pos);
	cout << "userName = " << userName << endl;
}

int main()
{
	//test01();
	test02();

	system("pause");
	return 0;
}
