#define _CRT_SECURE_NO_WARNINGS 1
#include<set>	//不管是set还是multiset都是用set
#include<iostream>
#include<algorithm>
#include<stdio.h>
#include<string>
using namespace std;

//set/multiset容器
//简介
// 所有元素都会在插入时自动被排序
//本质
// set/multiset属于关联式容器,底层结构是用二叉树 - (红黑树)
//set和multiset区别
// set不允许容器中有重复的元素
// multiset允许容器中有重复的元素
//set构造和赋值
// set<T> st;	//默认构造函数
// set(const set &st);	//拷贝构造函数
//赋值
// set& operator=(const set &st);	//重载等号操作符
//
//总结:
// set容器插入数据时用insert
// set容器插入数据的数据会自动排序
//

//set容器遍历
//typedef int dataType;
//void printSet(set<dataType>& s)
//{
//	for (set<dataType>::iterator it = s.begin(); it != s.end(); it++)
//	{
//		cout << (*it) << " ";
//	}
//
//	cout << endl;
//}
//
//void test01()
//{
//	set<dataType>s1;
//
//	//插入数据 只有insert方式
//	s1.insert(20);
//	s1.insert(40);
//	s1.insert(10);
//	s1.insert(40);
//	s1.insert(30);
//
//	//遍历容器
//	//ste容器特点: 所有元素插入的时候会自动被排序
//	//set容器不允许插入重复的值
//	printSet(s1);
//
//	//拷贝构造
//	set<int>s2(s1);
//	printSet(s2);
//
//	//赋值
//	set<int>s3;
//	s3 = s2;
//	printSet(s3);
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//set大小操作 - 统计set容器大小以及交换set容器
// 函数原型
// size();	//返回容器中元素的个数
// empty();	//判断容器是否为空
// swap(st);	//交换两个合计容器
//
//总结
// 统计大小 - size
// 判断是否为空 - empty
// 交换容器 - swap
//

//set容器 大小和交换
//typedef int dataType;
//void printSet(set<dataType>& s)
//{
//	for (set<dataType>::iterator it = s.begin(); it != s.end(); it++)
//	{
//		cout << (*it) << " ";
//	}
//
//	cout << endl;
//}
//
////大小
//void test01()
//{
//	set<dataType>s1;
//	//插入数据
//	s1.insert(10);
//	s1.insert(20);
//	s1.insert(30);
//	s1.insert(40);
//
//	//打印函数
//	printSet(s1);
//
//	//判断是否为空
//	if (s1.empty())
//	{
//		cout << "空" << endl;
//	}
//	else
//	{
//		cout << "不空" << endl;
//		cout << "大小 = " << s1.size() << endl;
//	}
//}
//
////交换
//void test02()
//{
//	set<dataType>s1;
//	//插入数据
//	s1.insert(10);
//	s1.insert(20);
//	s1.insert(30);
//	s1.insert(40);
//
//	set<dataType>s2;
//	s2.insert(100);
//	s2.insert(200);
//	s2.insert(300);
//	s2.insert(400);
//
//	cout << "交换前" << endl;
//	printSet(s1);
//	printSet(s2);
//
//	cout << "交换后" << endl;
//	s1.swap(s2);
//	printSet(s1);
//	printSet(s2);
//
//}
//int main()
//{
//	test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//set插入和删除 - set容器进行插入数据和删除数据
//函数原型
// insert(elem);	//在容器中插入数据
// clear();	//清除所有元素
// erase(pos);	//删除pos迭代器所指的元素,返回下一个元素的迭代器
// erase(beg,end);	//删除区间beg,end的所有元素,返回下一个元素的迭代器
// erase(elem);	//删除容器中值为elem的元素
//

typedef int dataType;
void printSet(set<dataType>& s)
{
	for (set<dataType>::iterator it = s.begin(); it != s.end(); it++)
	{
		cout << (*it) << " ";
	}

	cout << endl;
}

void test01()
{
	set<dataType>s1;

	//插入数据 只有insert方式
	s1.insert(20);
	s1.insert(40);
	s1.insert(10);
	s1.insert(40);
	s1.insert(30);

	//遍历容器
	printSet(s1);

}

int main()
{
	test01();

	system("pause");
	return 0;
}
