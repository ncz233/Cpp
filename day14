#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string>
#include <iostream>
using namespace std;

//继承同名静态成员处理方式(和同名成员一样就是和上节课一样)
// 问题继承中的静态成员在子类对象上如何进行访问的
// 静态成员和非静态成员出现同名，处理方式一致
// 访问子类同名成员 直接访问即可
// 访问父类同名成员 需要加作用域
//总结:同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式(通过对象 和 通过类名)

//class Base
//{
//public:
//	Base();
//	~Base();
//	
//	static void func()
//	{
//
//		cout << "base func" << endl;
//	}
//
//	static void func(int a)
//	{
//
//		cout << "base func(int a)" << endl;
//	}
//
//	static int m_A;
//
//private:
//
//};
//
//Base::Base()
//{
//}
//
//Base::~Base()
//{
//}
//
//int Base::m_A = 100;
//
//class Son :public Base
//{
//public:
//
//	static void func()
//	{
//
//		cout << "son func" << endl;
//	}
//
//	static int m_A;
//
//};
//int Son::m_A = 200;
//
//void test01()
//{
//	//同名的静态属性
//	//通过对象访问
//	printf("通过对象访问\n");
//	Son s;
//	cout << "son m_A = " << s.m_A << endl;
//	cout << "base m_A = " << s.Base::m_A << endl;
//
//	//通过类名访问
//	printf("通过类名访问\n");
//	cout << "son m_A = " << Son::m_A << endl;
//	cout << "base m_A = " << Base::m_A << endl;//这个是直接从父类拿到
//	//第一个::代表通过类名方式访问 第二个::代表访问父类作用域下
//	cout << "base m_A = " << Son::Base::m_A << endl;
//
//	//同名的静态函数
//	//通过对象访问
//	printf("通过对象访问\n");
//	printf("\n");
//	s.func();
//	s.Base::func();
//
//	//通过类名
//	printf("通过类名访问\n");
//	Son::func();
//	Son::Base::func();
//
//	//子类出现和父类同名的静态成员函数，也会隐藏父类中所有同名成员函数
//	//如果想访问父类中被隐藏同名成员，需要加作用域
//	//Son::func(10);
//	Son::Base::func(10);
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//多继承语法
// C++允许一个类继承多个类
// 语法:class 子类 :继承方式 父类1, 继承方式 父类2...
// 多继承可能会引发父类中有同名成员出现，需要加作用域区分
// C++实际开发中不建议使用多继承
//总结:多继承中如果父类中出现了同名情况，子类使用时候要加作用域

//class Base
//{
//public:
//	Base();
//	~Base();
//	
//	int m_A;
//private:
//
//};
//
//Base::Base()
//{
//	m_A = 100;
//}
//
//Base::~Base()
//{
//}
//
//class Base2
//{
//public:
//	Base2();
//	~Base2();
//
//	int m_A;
//private:
//
//};
//
//Base2::Base2()
//{
//	m_A = 200;
//}
//
//Base2::~Base2()
//{
//}
//
////子类 需要继承base1和base2
//// 语法:class 子类 :继承方式 父类1, 继承方式 父类2...
//class Son :public Base, public Base2
//{
//public:
//	Son()
//	{
//		m_C = 300;
//		m_D = 400;
//	}
//	int m_C;
//	int m_D;
//};
//
//void test01()
//{
//	Son s;
//	cout << "sizeof = " << sizeof(s) << endl;//全部都加起来
//	//如果父类2的m_B变成m_A编译器那会报错,当父类冲出现重名的成员，需要加作用域
//	//cout << "m_A = " << s.m_A << endl;
//	cout << "m_A = " << s.Base::m_A << endl;
//	cout << "m_A = " << s.Base2::m_A << endl;
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//菱形继承
// 菱形继承概念
// 两个派生类继承同一个基类
// 又有某个类同时继承者两个派生类
// 这种继承被称为菱形继承，或者钻石继承
// 
// 菱形继承的问题{(动物)(羊)(驼)(羊驼)}
// 羊继承了动物的数据，驼同样继承了动物的数据，当羊驼使用数据时，就会产生二义性
// 羊驼继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以
// 总结:菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义
// 利用虚继承可以解决菱形继承问题
//

//动物类
class Animal
{
public:
	Animal();
	~Animal();

	int m_age;

private:

};

Animal::Animal()
{
}

Animal::~Animal()
{
}

//利用虚继承 解决菱形继承的问题
// 在继承之前 加上关键字 virtual 变为虚继承
// Animal类称为 虚基类(类似共享) = virtual会指向一个虚基表，表里有偏移量，偏移量和前面的数相加就是这个唯一的属性 
//羊类
class Sheep :virtual public Animal
{

};

//驼类
class Camle :virtual public Animal
{

};

//羊驼类
class SheepTuo :public Sheep, public Camle
{


};

void test01()
{
	SheepTuo st;
	st.Sheep::m_age = 18;
	st.Camle::m_age = 28;
	//菱形继承，两个父类拥有相同的数据，需要加以作用域区分
	cout << "st.sheep::m_age = " << st.Sheep::m_age << endl;
	cout << "st.camle::m_age = " << st.Camle::m_age << endl;
	cout << "st.m_age = " << st.m_age << endl;

	//这份数据我们知道 只有一份就可以了，菱形继承导致了数据有两份，资源浪费
	//利用虚继承 解决菱形继承的问题
}

int main()
{
	test01();

	system("pause");
	return 0;
}

//多态
// 多态的基本概念
// 多态是C++面向对象的三大特性之一
// 多态分为两类
// 静态多态：函数重载和运算符重载属于静态多态，复用函数名
// 动态多态：派生类和虚函数实现运行时多态
// 静态多态和动态多态区别
// 静态多态的函数地址早绑定 - 编译阶段确定函数地址
// 动态多态的函数地址晚绑定 - 运行阶段确定函数地址
//总结:多态满足条件
// 有继承关系
// 子类重写父类的虚函数
// 多态使用条件
// 父类指针或引用指向子类对象
// 重写：函数返回值类型 函数名 参数列表 完全一致称为重写

//多态
//动物类
//class Animal
//{
//public:
//	Animal();
//	~Animal();
//
//	//虚函数
//	virtual void speak()//从1字节变成4字节了，那个4字节就是指针叫 vfptr(虚函数指针) 指向 vftable(虚函数表)表内部记录虚函数的地址
//	{
//		cout << "动物在说话" << endl;
//	}
//
//private:
//
//};
//
//Animal::Animal()
//{
//}
//
//Animal::~Animal()
//{
//}
//
////猫类
//class Cat :public Animal//因为是继承下来的所有东西都一样虚函数也一样
//{
//public:
//	// 重写 函数返回值类型 函数名称 参数列表 完全相同 (子类的virtual是可写可不写的)
//	//如果发生重写子类会把子类中的虚函数表中的内容做一个覆盖的操作
//	//当子类重写父类的虚函数
//	//子类中的虚函数表 内部 会替换成 子类的虚函数地址(父类每发生改变)
//	virtual void speak()
//	{
//		cout << "小猫在喵喵喵" << endl;
//	}
//};
//
//class Dog :public Animal
//{
//public:
//	void speak()
//	{
//		cout << "小狗在汪汪汪" << endl;
//	}
//};

//执行说话的函数
//地址早绑定，在编译阶段确定了函数的地址
//如果想执行让猫说话，那么这个函数的地址就能提前绑定，需要在运行阶段进行绑定，地址晚绑定。所以加了个virtual虚函数

//动态多态满足条件
// 有继承关系
// 子类要重写父类的虚函数

//动态多态使用
// 父类的指针或者引用执行子类的对象!!!!!!!!!

//当父类的指针或者引用指向子类对象的时候，发生多态
//void doSpeak(Animal& animal)//Animal& animal = cat;
//{
//	animal.speak();
//}
//
//void test01()
//{
//	Cat cat;
//	doSpeak(cat);
//
//	Dog dog;
//	doSpeak(dog);
//}
//
//void test02()
//{
//	cout << "sizeof Animal = " << sizeof(Animal) << endl;
//}
//
//int main()
//{
//	test01();
//	test02();
//	system("pause");
//	return 0;
//}

//多态的深入剖析(上面添加的内容)

//多态案列 - 计算器实现
//普通写法 - 只要扩展新的功能都需动自己的源码
//在真正的开发正 提倡 开闭原则
//开闭原则：对扩展进行开发，对修改进行关闭
class Calculator
{
public:
	Calculator();
	~Calculator();

	int getResult(string oper)
	{
		while (true)
		{
			if (oper == "+")
			{
				return m_Num1 + m_Num2;
			}
			else if (oper == "-")
			{
				return m_Num1 - m_Num2;
			}
			else if (oper == "*")
			{
				return m_Num1 * m_Num2;
			}
			else if (oper == "/")
			{
				return m_Num1 / m_Num2;
			}
			else
			{
				cout << "请重新输入+-*/" << endl;
			}
		}

	}

	int m_Num1;
	int m_Num2;
private:

};

Calculator::Calculator()
{
}

Calculator::~Calculator()
{
}

void test01()
{
	//创建一个计算器的对象
	Calculator c;
	c.m_Num1 = 10;
	c.m_Num2 = 10;
	cout << "num1 + num2 = " << c.getResult("+") << endl;
	cout << "num1 - num2 = " << c.getResult("-") << endl;
	cout << "num1 * num2 = " << c.getResult("*") << endl;
}

//利用多态实现计算器
//多态带来的好处
// 组织结构清晰
// 可读性强
// 对于前期和后期扩展以及维护性高
//

//实现计算器的抽象类
//class AbstractCalculator
//{
//public:
//
//	virtual int getResult()
//	{
//		return 0;
//	}
//
//	int m_Num1;
//	int m_Num2;
//};
//
////加法计算器
//class AddCalculator :public AbstractCalculator
//{
//public:
//	int getResult()
//	{
//		return m_Num1 + m_Num2;
//	}
//};
//
////减法计算器类
//class SubCalculator :public AbstractCalculator
//{
//public:
//	int getResult()
//	{
//		return m_Num1 - m_Num2;
//	}
//};
//
////乘法计算器类
//class MulCalculator :public AbstractCalculator
//{
//public:
//	int getResult()
//	{
//		return m_Num1 * m_Num2;
//	}
//};
//
//void test02()
//{
//	//多态使用条件
//	//父类指针或者引用指向子类对象
//
//	//加法
//	AbstractCalculator* abc = new AddCalculator;
//	abc->m_Num1 = 10;
//	abc->m_Num2 = 10;
//	printf("%d + %d = %d\n", abc->m_Num1, abc->m_Num2, abc->getResult());
//
//	delete abc;
//	abc = NULL;
//
//	//减法
//	abc = new SubCalculator;
//	abc->m_Num1 = 10;
//	abc->m_Num2 = 10;
//	printf("%d - %d = %d\n", abc->m_Num1, abc->m_Num2, abc->getResult());
//
//	delete abc;
//
//	//乘法
//	abc = new MulCalculator;
//	abc->m_Num1 = 10;
//	abc->m_Num2 = 10;
//	printf("%d * %d = %d\n", abc->m_Num1, abc->m_Num2, abc->getResult());
//
//
//}
//
//int main()
//{
//	//test01();
//
//	test02();
//
//	system("pause");
//	return 0;
//}

//纯虚函数和抽象类
//在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为纯虚函数
// 纯虚函数语法：virtual 返回值类型 函数名 (参数列表) = 0;
// 当类中有了纯虚函数，这个类也称为抽象类
// 抽象类特点：
// 无法实列化对象
// 子类必须重写抽象类中的纯虚函数，否则也属于抽象类

//纯虚函数和抽象类
class Base
{
public:
	Base();
	~Base();

	//纯虚函数
	//只要有一个纯虚函数，这个类称为抽象类
	//抽象类特点
	// 无法实列化对象
	// 子类必须重写抽象类中的纯虚函数，否则也属于抽象类
	virtual void func() = 0;

private:

};

Base::Base()
{
}

Base::~Base()
{
}

class Son :public Base
{
public:
	virtual void func()
	{
		printf("func函数调用\n");
	}

};

void test01()
{
	//抽象类不能实列化
	//Base b;
	//new Base;

	//没重写，是抽象类
	//Son s;

	Son s;//子类必须重写父类中的纯虚函数，否则无法实列化对象

	Base* base = new Son;
	base->func();
	delete base;

}

int main()
{
	test01();
	system("pause");
	return 0;
}
