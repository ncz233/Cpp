#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

//静态成员
// 静态成员就是在成员函数前加上关键字static，称为静态成员
// 静态成员分为 - 静态成员变量它是在编译阶段就已经分配内存了相当于=程序还没有运行之前就已经分配好内存了在 - 全局区
//  静态成员变量
//   所有对象共享在同一份数据
//   在编译阶段分配内存
//   类内声明，类外初始化
//  静态成员函数
//   所有对象共享一个函数
//   静态成员函数只能访问静态成员变量

//静态成员变量
//class Person
//{
//public:
//	//Person();
//	//~Person();
//
//	//1.所有对象共享在同一份数据
//	//2.在编译阶段分配内存
//	//3.类内声明，类外初始化
//	static int m_a;//声明
//
//	//静态成员变量也是有访问权限的
//private:
//	static int m_b;
//};
//
//int Person::m_a = 100;//外面初始化
//int Person::m_b = 200;
//
//void test01()
//{
//	Person p;
//	cout << p.m_a << endl;
//	Person p2;
//	p2.m_a = 200;
//	cout << p.m_a << endl;
//}
//
//void test02()
//{
//	//0静态成员变量 不属于某个对象上，所有对象都共享同一份数据
//	//因此静态成员变量有两种访问方式
//	
//	// 通过对象进行访问
//	//Person p;
//	//cout << p.m_a << endl;
//
//	// 通过类名进行访问
//	cout << Person::m_a << endl;
//	//cout << Person::m_b << endl;//尽管不是在对象上，但静态成员变量在私有区域就会访问不到了
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//静态成员函数
//   所有对象共享一个函数
//   静态成员函数只能访问静态成员变量

class Person
{
public:
	//Person();
	//~Person();

	//静态成员函数
	static void func()
	{
		m_a = 100;//静态的成员函数可以访问静态成员变量
		//m_b = 200;//静态成员函数不可以访问非静态成员变量，无法区分到底是那个对象的m_b属性，
		 //因为是所有对象共享的一个函数，改非静态会造成是谁改？(说白了，在共享数据谁都可以用，如果是非共享数据那谁用)
		cout << "static void func调用" << endl;
	}
	
	//静态成员变量
	static int m_a;
	int m_b;

	//静态成员函数是有访问权限的
private:
	static void func2()
	{
		cout << "static void func2调用" << endl;
	}

};

int Person::m_a;

//有两种访问方式，一种通过对象，一种通过类名
void test01()
{
	//通过对象访问
	Person p;
	p.func();

	//通过类名访问
	Person::func();

	//Person::func2();//类外访问不到私有的静态成员函数

}

int main()
{
	test01();

	system("pause");
	return 0;
}

//C++对象模型和this指针
//成员变量和成员函数分开存储
//在c++中，类内的成员变量和成员函数分开存储
//只有非静态变量才属于类的对象上

//成员变量和成员函数分开存储的
// 总结：只有非静态成员变量属于类上的，其他都不属于
//和结构体的储存方式一样都是对齐存储的
//class Person
//{
//	int m_a;//非静态成员变量,属于类对象上
//	static int m_b;//静态成员变量,不属于类对象上
//	void func()//非静态成员函数,不属于类对象上
//	{
//
//	}
//	static void func2()//静态成员函数,不属于类对象上
//	{
//
//	}
//};
//
//int Person::m_b = 0;
//
//void test01()
//{
//	Person p;
//	//空对象占用空间为：1
//	//因为c++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置
//	//每个空对象也应该有一个独一无二的内存地址
//	cout << "size of p = " << sizeof(p) << endl;
//}
//
//void test02()
//{
//	Person p;
//	//
//	//
//	cout << "size of p = " << sizeof(p) << endl;
//}
//
//int main()
//{
//	//test01();//空对象占多大
//	test02();
//
//	system("pause");
//	return 0;
//}

//this指针概念
//每一个非静态成员函数只会诞生一份函数实列，也就是说多个同类型的对象会共用一块代码
// 
//那么问题是：这一块代码是如何区分那个对象调用自己的呢
//C++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象
// 
//this指针是隐含每一个非静态成员函数内的一种指针
//this指针不需要定义，直接使用即可
// 
//this指针的用途
// 当形参和成员变量重名时，可用this指针来区分
// 在类的非静态成员函数中返回对象本身，可使用return *this
// 
// 就是谁调用this，这个this指针就会指向谁,隐含非静态成员函数内，直接使用。(静态没有)

//class Person
//{
//public:
//	Person(int age)
//	{
//		//this指针指向 被调用的成员函数 所属的对象
//		this->age = age;
//	}
//
//
//	Person& PersonAddAge(Person& p)
//	{
//		this->age += p.age;
//
//		//this指向p2的指针，而*this指向的就是p2这个对象的本体
//		return *this;
//	}
//
//	int age;
//
//};
//
////1.解决名称冲突
//void test01()
//{
//	Person p1(18);
//	cout << "p1的年龄" << p1.age << endl;
//}
//
////2.返回对象本身用*this
//void test02()
//{
//	Person p1(10);
//	Person p2(10);
//
//	//链式编程思想，一定要记得函数加上&和不加的区别，一个是址一个是值
//	p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1);
//	cout << "p2的年龄为:" << p2.age << endl;
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//空指针访问成员函数
// C++中空指针可是可以调用成员函数的，但是也注意有没有用到this指针
// 如果用到this指针，需要加以判断保证代码的健壮性

//空指针调用成员函数
//class Person
//{
//public:
//	void showClassName()
//	{
//		cout << "this is Person class" << endl;
//	}
//
//	void showcPersonAge()
//	{
//		if (this == NULL)
//		{
//			return;
//		}
//
//		//报错原因是因为传入的指针是为NULL
//		cout << "age = " << m_age << endl;
//	}
//
//	int m_age;
//
//};
//
//void test01()
//{
//	Person* p = NULL;
//	p->showClassName();
//	p->showcPersonAge();
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//const修饰的成员函数
// 常函数
// 成员函数后加const后我们称为这个函数为常量函数
// 常函数内不可以修改成员属性
// 成员属性声明是加关键字mutable后，在常函数中依然可以修改
// 
// 常对象
// 声明对象前加const称该对象为常对象
// 常对象只能调用常函数

//常函数
//class Person
//{
//public:
//	
//	//this指针的本质是 指针常量 指针的指向是不可修改
//	// 一般看来  Person* const this; -> 成员函数后加上const是  const Person* const this;
//	//在成员函数后面加const，修饰的是this指向，让指针指向的值也不可以修改
//	void showPerson() const
//	{
//		this->m_b = 100;
//		//this->m_a = 100;
//		//this = NULL;//this指针是不可修改指针的指向的
//	}
//	void func()
//	{
//		m_a = 100;
//	}
//
//	int m_a;
//	mutable int m_b;//特殊变量，即使在常函数中，也可以修改这个值,加关键字mutable
//};
//
//void test01()
//{
//	Person p;
//	p.showPerson();
//}
//
////常对象 - 不可修改属性(可以修改静态变量的值，因为静态变量不在类中)
//void test02()
//{
//	const Person p;//在对象前加const，变为常对象
//	//p.m_a = 100;
//	p.m_b = 100;//m_b是特殊值，在常对象下也可以修改
//
//	//常对象只能调用常函数
//	p.showPerson();
//	//p.func();//常对象 不可调用普通成员函数，因为普通成员函数可以修改属性，而我们常对象本身是不可修改属性
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//友元
//在程序中，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要元友的技术
// 元友的目的就是让一个函数或者类 访问另一个类中私有成员
// 元友的关键字为friend
// 三种实现
// 全局函数做元友
// 类做元友
// 成员函数做元友
//

//建筑物类
class Building
{
	friend void goodGay(Building* building);

public:
	Building()
	{
		m_SittingRoom = "客厅";
		m_BedRoom = "卧室";

	}
	
	string m_SittingRoom;//客厅
private:
	string m_BedRoom;//卧室

};

//全局函数
void goodGay(Building *building)
{
	cout << "好基友全局函数 正在访问:" << building->m_SittingRoom << endl;
	cout << "好基友全局函数 正在访问:" << building->m_BedRoom << endl;

}

void test01()
{
	Building building;
	goodGay(&building);
}

int main()
{
	test01();

	system("pause");
	return 0;
}
