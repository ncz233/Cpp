#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<list>
#include<string>
using namespace std;

//list容器 - 将数据进行链式存储
//概念
// 链表(list)是一种物理存储单元上非连续的存储结构,数据元素的逻辑顺序是通过俩鸟中的栈中连接实现的
// 链表的组成 - 链表由一系列节点组成
// 节点的组成 - 一个是存储数据元素的数据域,另一个是存储下一个节点地址的指针域
// stl中的链表是一个双向循环链表 - (不是我以前做的单项头节点的链表,因为双向循环的链表太完美了,无题目可出)
// 
// 由于链表的存储方式并不是连续的内存空间,因此链表list中的迭代器只支持前移和后移,数以双向迭代器
// list优点
// 采用动态存储分配,不会造成内存的浪费和溢出
// 采用执行插入和删除十分方便,修改指针即可,不需要移动大量元素
// list缺点
// 链表灵活,但是空间(指针)和时间(遍历)额外耗费较大
// list有一个重要的性质,插入操作和删除操作都不会造成原有list迭代器的失效,在vector是不成立的
// 
// 总结
// stl中List和vector是两个最常被使用的容器,各有优缺点
//

//list构造函数 - 创建list容器
//函数模型
// list<T> lis;	//list采用模板类实现,对象的默认构造形式
// list(beg,end);	//构造函数将(beg,end)区间中的元素拷贝给本身
// list(n,elem);	//构造函数将n个elem拷贝本身
// list(const list &lis);	//拷贝构造函数
// 
// 总结
// list构造方式同其他几个stl常用容器,熟练掌握即可
//

//list容器构造函数
//void printList(const list<int>& L)
//{
//	for (list<int>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<int>L1;
//
//	//添加数据
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//	L1.push_back(40);
//
//	//遍历容器
//	printList(L1);
//
//	//区间构造
//	list<int>L2(L1.begin(), L1.end());
//	printList(L2);
//
//	//拷贝构造
//	list<int>L3(L2);
//	printList(L3);
//
//	//n个elem 
//	list<int>L4(10, 100);
//	printList(L4);
//
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//list赋值和交换 - 给list容器进行赋值,以及交换list容器
// 函数原型
// assign(beg, end);	//将(beg,end)区间中的数据拷贝赋值给本身
// assign(n, elem);	//将n个elem拷贝赋值给本身
// list& operator=(const list &lst);	//重载符号操作符
// swap(lst);	//将lst与本身的元素互换
//
//总结:list赋值和交换操作能够灵活运用即可

//list容器赋值和交换

//赋值
//void printList(const list<int>& L)
//{
//	for (list<int>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<int>L1;
//
//	//添加数据
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//	L1.push_back(40);
//	for (int i = 0; i < 5; i++)
//	{
//		L1.push_back(i);
//	}
//
//	//遍历容器
//	printList(L1);
//
//	//operator=赋值
//	list<int>L2;
//	L2 = L1;
//	printList(L2);
//
//	//assign赋值
//	list<int>L3;
//	L3.assign(L2.begin(),L2.end());
//	printList(L3);
//
//	list<int>L4;
//	L4.assign(10, 100);
//	printList(L4);
//}
//
////交换
//void test02()
//{
//	//创建
//	list<int>L1;
//
//	//添加数据
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//	L1.push_back(40);
//
//	list<int>L2;
//	L2.assign(10, 100);
//
//	cout << "交换前" << endl;
//	printList(L1);
//	printList(L2);
//
//	L1.swap(L2);
//	cout << "交换后" << endl;
//	printList(L1);
//	printList(L2);
//
//
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//list大小操作 - 对list容器的大小操作
// 函数原型
// size();	//返回容器中元素的个数
// empty();	//判断容器是否为空
// resize(num);	//重新指定容器的长度为num,若容器变长,则以默认值填充新位置,如果容器变短,则末尾超出容器长度的元素被删除
// resize(num,elem);	//重新指定容器的长度为num,若容器变长,则以elem值填充新位置,如果容器变短,则末尾超出容器长度的元素被删除
//
//总结
// 判断是否为空 - empty
// 返回元素个数 - size
// 重新指定个数 - resize
//

//typedef int dataType;
//void printList(const list<dataType>& L)
//{
//	for (list<dataType>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<dataType>L1;
//
//	//添加数据
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//	L1.push_back(40);
//	for (int i = 0; i < 5; i++)
//	{
//		L1.push_back(i);
//	}
//
//	//遍历容器
//	printList(L1);
//
//	//判断是否为空
//	if (L1.empty())
//	{
//		cout << "为空" << endl;
//	}
//	else
//	{
//		cout << "不为空" << endl;
//		cout << "L1的元素个数 = " << L1.size() << endl;
//	}
//
//	//重新指定大小
//	//L1.resize(10);
//	L1.resize(10, 100);
//	printList(L1);
//
//	L1.resize(2);
//	printList(L1);
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//list插入和删除 - 对list容器进行数据的插入和删除
// 函数原型 - 要用迭代器
// push_back(elem);	//在容器尾部加入一个元素
// pop_back();	//删除容器中最后一个元素
// push_front(elem);	//在容器开头插入一个元素
// pop_front();	//从容器开头移除第一个元素
// insert(pos,elem);	//在pos位置插入elem元素的拷贝,返回新数据的位置
// insert(pos,n,elem);	//在pos位置插入n个elem数据,无返回值
// insert(pos,beg,end);	//在pos位置插入[beg,end]区间的数据,无返回值
// clear();	//移除容器是所有数据
// erase(beg,end);	//删除[beg,end]区间的数据,返回下一个数据的位置
// erase(pos);	//删除pos位置的数据,返回下一个数据的位置
// remove(elem);	//删除容器中所有与elem值匹配的元素
//
//总结
// 尾插 -- push_back
// 尾删 -- pop_back
// 头插 -- push_front
// 头删 -- pop_front
// 插入 -- insert
// 删除 -- erase
// 移除 -- remove
// 清空 -- clear
//

//typedef int dataType;
//void printList(const list<dataType>& L)
//{
//	for (list<dataType>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<dataType>L1;
//
//	//尾插
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//	
//	//头插
//	for (int i = 1; i < 4; i++)
//	{
//		L1.push_front(i);
//	}
//
//	//遍历容器
//	printList(L1);
//
//	//尾删
//	L1.pop_back();
//	printList(L1);
//
//	//头删
//	L1.pop_front();
//	printList(L1);
//
//	//insert插入
//	list<int>::iterator it = L1.begin();
//	L1.insert(++it, 1000);
//	//L1.insert(L1.begin(), 1000);
//	printList(L1);
//
//	//删除
//	it = L1.begin();
//	L1.erase(++it);
//	printList(L1);
//
//	//移除 - 和删除的结果是一样的
//	L1.push_back(10000);
//	L1.push_back(10000);
//	printList(L1);
//	L1.remove(10000);
//	printList(L1);
//
//	//清空
//	L1.clear();
//	printList(L1);
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//list数据存取 - 对list容器中数据进行存取
// 函数原型
// front();	//返回第一个元素
// back();	//返回最后一个元素
//
//总结:
// list容器中不可以通过[]或at()方式访问数据
// 返回第一个元素 -- front()
// 返回最后一个元素 -- back()

//list容器 数据存取
//typedef int dataType;
//void printList(const list<dataType>& L)
//{
//	for (list<dataType>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<dataType>L1;
//
//	//尾插
//	L1.push_back(10);
//	L1.push_back(20);
//	L1.push_back(30);
//
//	//头插
//	for (int i = 1; i < 4; i++)
//	{
//		L1.push_front(i);
//	}
//
//	//访问
//	//L1[0];//不可以用[]访问list容器中的元素
//	//L1.at(0);//不可以用at()访问list容器中的元素
//	//原因是list底层是一个链表,链表这么随机访问中间的元素,如果你让迭代器移动一个记录一个插入,删除和移除也必须考虑到,所以list容器就不推荐访问中间的元素,但是你可以用for循环的迭代器++可以实现类似跳跃式访问,但不是随机访问
//	cout << "第一个元素" << L1.front() << endl;
//	cout << "最后一个元素" << L1.back() << endl;
//	
//	//验证迭代器不支持访问 - (适用于大部分的容器,看他能不能随机访问)
//	list<int>::iterator it = L1.begin();
//	it++;//只能一个一个加或者一个一个减
//	it--;//支持双向递增或递减
//	//it = it + 1;//同样的结果,但是你可以+2 +3.跳着访问,所以是不可以的
//
//	//遍历容器
//	printList(L1);
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//list反转和排序 - 将容器中的元素反转,以及将容器中的数据进行排序
//函数原型
// reverse();	//反转链表(首位对掉)
// sort();	//链表排序
// 
// 总结
// 反转 -- reverse();
// 排序 -- sort(); - (成员函数)
//

//typedef int dataType;
//void printList(const list<dataType>& L)
//{
//	for (list<dataType>::const_iterator it = L.begin(); it != L.end(); it++)
//	{
//		cout << *it << " ";
//	}
//	cout << endl;
//}
//
//void test01()
//{
//	//创建
//	list<dataType>L1;
//
//	//尾插
//	L1.push_back(10);
//	L1.push_back(30);
//	L1.push_back(20);
//
//	//头插
//	for (int i = 1; i < 4; i++)
//	{
//		L1.push_front(i);
//	}
//
//	//遍历容器
//	cout << "反转前" << endl;
//	printList(L1);
//
//	//反转后
//	cout << "反转后" << endl;
//	L1.reverse();
//	printList(L1);
//}
//
////降序用到的函数
//bool myCompare(int v1, int v2)
//{
//	//降序 就让第一个数大于第二个数
//	return v1 > v2;
//}
//
////排序
//void test02()
//{
//	//创建
//	list<dataType>L1;
//
//	//尾插
//	L1.push_back(10);
//	L1.push_back(30);
//	L1.push_back(20);
//
//	//头插
//	for (int i = 1; i < 4; i++)
//	{
//		L1.push_front(i);
//	}
//
//	//排序前
//	cout << "排序前" << endl;
//	printList(L1);
//
//	//所有不支持随机访问迭代器的容器,不可以用标准的算法
//	//不支持随机访问迭代器的容器,内部会提供对应一些算法
//	//sort(L1.begin(), L1.end());//全局标准算法
//	L1.sort();//成员函数,默认的排序规则,从小到大,升序
//	cout << "排序后" << endl;
//	printList(L1);
//
//	//降序排序
//	L1.sort(myCompare);
//	printList(L1);
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//排序案列
//案例描述:将person自定义数据类型进行排序,person中属性有姓名,年龄,身高
// 排序规则:按照年龄进行升序,如果年龄相同按照升高进行降序
//
