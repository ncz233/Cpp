#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include<string>
#include<list>
#include<map>
using namespace std;

//stl - 常用算法
//概述
// 算法主要是由头文件<algorithm> <functional> <numeric>组成
// <algorithm>是所有stl头文件中最大的一个,范围涉及到比较,交换,查找,遍历操作,赋值,修改等等
// <functional>体积很小,只包括几个在序列上面进行简单数学运算的模板函数
// <numeric>定义了一些模板类,用以声明函数对象

//常用遍历算法 - 掌握常用的遍历算法
// 算法简介
// for_each;	//遍历容器
// transform;	//搬运容器到另一个容器中
//总结
// for_each在实际开发中是最常用遍历算法,需要熟练掌握
// transform搬运的目标容器必须要提前开辟空间,否则无法正常搬运

//for_each - 实现遍历容器
// 函数原型
// for_each(iterator beg, iterator end, _func);
// 遍历算法 遍历容器元素
// beg开始迭代器
// end结束迭代器
// _func函数或者函数对象

//常用遍历算法 for_each
//普通函数
void print01(int val)
{
	cout << val << " ";
}

//仿函数
class print02
{
public:
	void operator()(int val)
	{
		cout << val << " ";
	}

};

void test01()
{
	list<int> l;
	for (int i = 0; i < 10; i++)
	{
		l.push_back(i);
	}

	for_each(l.begin(), l.end(), print01);
	cout << endl;

	for_each(l.begin(), l.end(), print02());
	cout << endl;

	//如果确定数组的话第一个参数是数组名,第二个是数组的个数,第三个是函数或者函数对象
}

// transform - 搬运容器到另一个容器中
//函数原型
// teansform(iterator beg1, iterator end1, iterator beg2, _func);
// beg1	原容器开始迭代其
// end1	原容器结束迭代器
// beg2	目标容器开始迭代器
// _func1	函数或者函数对象
//

//常用遍历算法transform
class MyPrint
{
public:
	void operator()(int val)
	{
		printf("%d ", val);
	}
};

class Transform
{
public:
	int operator()(int val)
	{
		return val + 100;
	}

};

void test02()
{
	list<int> l;
	for (int i = 0; i < 10; i++)
	{
		l.push_back(i);
	}

	list<int> lTarget;	//目标容器
	lTarget.resize(l.size());//搬运的时候目标容器必须有足够的空间

	transform(l.begin(), l.end(), lTarget.begin(), Transform());

	for_each(lTarget.begin(), lTarget.end(), MyPrint());
	
}

int main()
{
	//test01();
	test02();

	system("pause");
	return 0;
}
