========================================================point_and_circle.h
#pragma once
#include<iostream>
using namespace std;

class Point//坐标 or 点
{
public:
	void setX(int x);

	int getX();


	void setY(int y);

	int getY();


private:
	int m_X;
	int m_Y;
};

//圆
class Circle
{
public:
	void setR(int r);

	int getR();


	void setCenter(Point center);

	Point getCenter();


private:
	int m_R;//半径

	//核心内容，在类中可以让另一个类 作为本来中的成员
	Point m_Center;//圆心
};




=====================================================point_and_circle.cpp
#define _CRT_SECURE_NO_WARNINGS 1
#include"point_and_circle.h"

//点

void Point::setX(int x)
{
	m_X = x;
}
int Point::getX()
{
	return m_X;
}

void Point::setY(int y)
{
	m_Y = y;
}
int Point::getY()
{
	return m_Y;
}


//圆

void Circle::setR(int r)
{
	m_R = r;
}
int  Circle::getR()
{
	return m_R;
}

void  Circle::setCenter(Point center)
{
	m_Center = center;
}
Point  Circle::getCenter()
{
	return m_Center;
}




=========================================================day 11.cpp
#define _CRT_SECURE_NO_WARNINGS 1
#include"point_and_circle.h"
using namespace std;

//成员属性私有化
//将所有成员属性设置为私有，可以自己控制读写权限
//对于写权限，我们可以检测数据的有效性

//class Person
//{
//public:
//	//做接口，写年龄
//	void setName(string name)
//	{
//		m_Name = name;
//	}
//	//获取名字
//	string getName()
//	{
//		return m_Name;
//	}
//
//	//获取年龄
//	int getAge()
//	{
//		//m_Age = 0;
//		return m_Age;//没赋值会是乱码所以先赋值
//	}
//	void setAge(int age)
//	{
//		if (age>=0 && age<=150)
//		{
//			m_Age = age;
//		}
//		else
//		{
//			printf("不合法99归一\n");
//			m_Age = 0;
//			return;
//		}
//	}
//
//	//设置情人
//	void setLover(string lover)
//	{
//		m_Lover = lover;
//	}
//
//private:
//	//姓名 可读 可写
//	string m_Name;
//	//年龄 只读 - 可读可写，如果想修改（年龄必须是0~150之间）
//	int m_Age;
//	//情人 只写
//	string m_Lover;
//
//};
//
//int main()
//{
//	Person p;
//	//p.m_Name = "张三";//不能访问
//	//要用到接口间接访问
//	p.setName("张三");
//	cout << "姓名为：" << p.getName() << endl;
//
//	//p.m_Age = 18;//是不行的，因为它没在公共区，也没有间接访问的函数
//	//p.setAge(18);//在公共区没有该成员
//	p.setAge(1231);
//	cout << "年龄为：" << p.getAge() << endl;
//
//	//情人设置完
//	p.setLover("李四");
//	//cout << "情人为：" << p.m_Lover << endl;//不能访问
//
//	return 0;
//}

//案列：设置立方体类(Cude)
//求出立方体的面积和体积
//分别用全局函数和成员函数判断两个立方体是否相等。

//class Cube
//{
//public:
//
//	void setL(int l)
//	{
//		m_L= l;
//	}
//	int getL()
//	{
//		return m_L;
//	}
//	void setW(int w)
//	{
//		m_W = w;
//	}
//	int getW()
//	{
//		return m_W;
//	}
//	void setH(int h)
//	{
//		m_H = h;
//	}
//	int getH()
//	{
//		return m_H;
//	}
//
//	int calculateS()
//	{
//		return m_L * m_W * 6;
//	}
//	int calculateV()
//	{
//		return m_L * m_W * m_H;
//	}
//
//	//成员函数相等
//	bool isSameByClass(Cube* c)
//	{
//		if (m_L == c->getL() && m_W == c->getW() && m_H == c->getH())
//		{
//			return true;
//		}
//		else
//		{
//			return false;
//		}
//	}
//
//private:
//	int m_L;
//	int m_W;
//	int m_H;
//};
//
////全局函数判断相等
//bool isSame(Cube* c1,Cube* c2)
//{
//	if (c1->getL() == c2->getL() && c1->getW() == c2->getW() && c1->getH() == c2->getH())
//	{
//		return true;
//	}
//	else
//	{
//		return false;
//	}
//}
//
//int main()
//{
//	Cube c1;
//	c1.setL(10);
//	c1.setW(10);
//	c1.setH(10);
//
//	cout << "c1的面积：" << c1.calculateS() << endl;
//	cout << "c1的体积：" << c1.calculateV() << endl;
//
//	Cube c2;
//	c2.setL(10);
//	c2.setW(10);
//	c2.setH(10);
//
//	//bool ret = isSame(&c1, &c2) == 0 ? false : true;
//	if (isSame(&c1, &c2))
//	{
//		cout << "c1和c2是相等的 全局" << endl;
//	}
//	else
//	{
//		cout << "不相等的 全局" << endl;
//	}
//
//	if (c1.isSameByClass(&c2))
//	{
//		cout << "c1和c2是相等的 成员" << endl;
//	}
//	else
//	{
//		cout << "不相等的 成员" << endl;
//	}
//
//	return 0;
//}


//平面直角坐标系中点和圆的关系
//点
//class Point//坐标 or 点
//{
//public:
//	void setX(int x)
//	{
//		m_X = x;
//	}
//	int getX()
//	{
//		return m_X;
//	}
//
//	void setY(int y)
//	{
//		m_Y = y;
//	}
//	int getY()
//	{
//		return m_Y;
//	}
//
//private:
//	int m_X;
//	int m_Y;
//};
//
////圆
//class Circle
//{
//public:
//	void setR(int r)
//	{
//		m_R = r;
//	}
//	int getR()
//	{
//		return m_R;
//	}
//
//	void setCenter(Point center)
//	{
//		m_Center = center;
//	}
//	Point getCenter()
//	{
//		return m_Center;
//	}
//
//private:
//	int m_R;//半径
//	
//	//核心内容，在类中可以让另一个类 作为本来中的成员
//	Point m_Center;//圆心
//};

//void isInCircle(Circle* c, Point* p)
//{
//	//两点之间的距离
//	int distance = (c->getCenter().getX() - p->getX()) * (c->getCenter().getX() - p->getX()) +
//		(c->getCenter().getY() - p->getY()) * (c->getCenter().getY() - p->getY());
//
//	//计算半径的平方
//	int rDistance = c->getR() * c->getR();
//
//	//判断关系
//	if (distance == rDistance)
//	{
//		cout << "点在圆上" << endl;
//	}
//	else if (distance > rDistance)
//	{
//		cout << "点在圆外" << endl;
//	}
//	else
//	{
//		cout << "点在圆内" << endl;
//	}
//}
//
//int main()
//{
//	//创建圆
//	Circle c;
//	c.setR(10);
//	Point cente;
//	cente.setX(10);
//	cente.setY(0);
//	c.setCenter(cente);
//
//	//创建点
//	Point p;
//	p.setX(10);
//	p.setY(10);
//	
//	//判断关系
//	isInCircle(&c, &p);
//
//	return 0;
//}

//对象的初始化和清理
// C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置
//利用到构造函数和析构函数
// 对象的初始化和清理也是两个非常重要的安全问题
//  一个对象或者变量没有初始化状态，对其使用后果是未知的
//  同样的使用完一个对象和变量，没有及时清理，也会造成一定的安全问题
// C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。
// 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供。(编译器提供的构造函数和析构函数是空实现的)
//  构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。
//  析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作
//
// 构造函数语法 - 类名(){}
//  构造函数，没有返回值也不写void
//  函数名称与类名相同
//  构造函数可以有参数，因此可以发生重载
//  程序在调用对象时候会自动调用构造，无需手动调用，而且只会调用一次
// 
// 析构函数语法 - ~类名(){}
//  析构函数，没有返回值也不写void
//  函数名称与类名相同，在名称前面加上符号~
//  析构函数不可以有参数，因此不可以发生重载
//  程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次

//对象的初始化和清理。你不写编译器会给你写，不过里面是空的。
//只能调用一次，初始化是在构造函数第一用，清理是析构函数最后用。
//class Person
//{
//public:
//	// 1.构造函数 进行初始化操作
//	//  构造函数，没有返回值也不写void
//	//	函数名称与类名相同
//	//	构造函数可以有参数，因此可以发生重载
//	//	程序在调用对象时候会自动调用构造，无需手动调用，而且只会调用一次
//	Person()
//	{
//		cout << "person 构造函数调用" << endl;
//	}
//
//	//2.析构函数 进行清理的操作
//	// 析构函数，没有返回值也不写void
//	//  函数名称与类名相同，在名称前面加上符号~
//	//  析构函数不可以有参数，因此不可以发生重载
//	//  程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
//	~Person()
//	{
//		cout << "person 析构函数调用" << endl;
//	}
//
//
//};
//
//void test01()
//{
//	Person p;
//}
//int main()
//{
//	//test01();
//	Person p;
//
//	system("pause");
//	return 0;
//}

//构造函数的分类及调用
// 两种分类方式
//  按参数分为：有参构造和无参构造
//  按类型分为：普通构造和拷贝构造
// 
// 三种调用方式
//  括号法
//  显示法
//  隐式转换法

//分类
// 按照参数分类   无参构造(默认构造) 和 有参构造
// 按照类型分类   普通构造函数 和 拷贝构造函数

//class Person
//{
//public:
//	Person()//无参普通
//	{
//		cout << "person 的无参构造函数调用" << endl;
//	}
//	Person(int a)//有参普通
//	{
//		m_age = a;
//		cout << "person 的有参构造函数调用" << endl;
//	}
//	//拷贝构造函数 - 完全复制一份给它，有点像结构体内的指针(不过是指向自己的)
//	Person(const Person*  p)//不能把指向别的class所以只能指向自己，所以要加const不能让它改指定对象，而且要传址
//	{
//		//就是：将传入的人身上的说有属性拷贝到我身上
//		m_age = p->m_age;
//		cout << "person 的拷贝构造函数调用" << endl;
//	}
//
//	~Person()
//	{
//		cout << "person 的析构函数调用" << endl;
//	}
//
//	//void getAge()
//	//{
//	//	cout << "年龄：" << m_age << endl;
//	//}
//
////private:
//	int m_age;
//
//};
////调用
////你喜欢那个就选那个，我们不必要全学会，最少知道对方在打什么代码
//void test01()
//{
//	//括号发
//	//Person p1;//默认构造函数调用
//	//Person p2(10);//有参构造函数调用
//	//Person p3(&p2);//拷贝构造函数调用
//
//	//注意事项
//	// 调用默认构造函数时候，不要加()
//	// 下面这几行代码，因为编译器会认为是一个函数声明，不会认为在创建对象(语法支持函数中写函数声明的)
//	//Person p1();
//	//void func();
//	//cout << "p2年龄：" << p2.m_age << endl;
//	//cout << "p3年龄：" << p3.m_age << endl;
//	
//	//显示法
//	//Person p1;
//	//Person p2 = Person(10);//有参构造
//	//Person p3 = Person(&p2);//拷贝构造
//
//	//Person(10);//匿名对象 特点：当前行执行结束后，系统会立即回收掉匿名对象
//	//cout << "aaaaaa" << endl;
//
//	//注意事项2
//	// 不要利用拷贝构造函数来初始化匿名对象。 编译器会认为Preson(p3) == Preson p3; 对象的声明
//	//Person(p3);
//
//	//隐式转换法
//	Person p4 = 10;//相当于 person p4 = person(10);  有参构造
//	Person p5 = &p4;//拷贝构造
//}
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//拷贝构造函数调用时机
// c++中拷贝构造函数调用时机通常有三种情况
//  使用一个已经创建完毕的对象来初始化一个新的对象
//  值传递的方式给函数参数传值
//  以值方式返回局部对象

//class Person
//{
//public:
//	Person()
//	{
//		cout << "person默认构造函数调用" << endl;
//	}
//	Person(int age)
//	{
//		cout << "person有参构造函数调用" << endl;
//		m_age = age;
//
//	}
//	Person(const Person& p)
//	{
//		cout << "person拷贝构造函数调用" << endl;
//		m_age = p.m_age;
//
//	}
//	~Person()
//	{
//		cout << "person默认析构函数调用" << endl;
//	}
//	int m_age;
//};
//
////1.使用一个已经创建完毕的对象来初始化一个新对象
//void test01()
//{
//	Person p1 (10);
//	Person p2(p1);
//	cout << "p2年龄：" << p2.m_age << endl;
//}
////2.值传递的方式给函数参数传值
//void dowork(Person p)
//{
//	cout << (int*)&p << endl;
//}
//void test02()
//{
//	Person p;
//	cout << (int*) &p << endl;//值传递地址不可能一样
//	dowork(p);//这个时在创建一个函数然后传入p。这个个拷贝一样，创建一份一样的calss传进去p。值传递就是复制一份
//}
////3.用值的方式返回局部的对象
//Person dowork2()
//{
//	Person p1;//函数执行完就结束了要清空所以用到了析构
//	cout << (int*)&p1 << endl;
//	return p1;//这里开始就已经是返回数据了开始创建
//}
//void test03()
//{
//	Person p = dowork2();//拷贝一份新的对象，不是同一个因为返回的是地址
//	cout << "你好" << (int*)&p << endl;//值传递地址不可能一样
//}
//int main()
//{
//	//test01();
//	//test02();
//	test03();
//
//	system("pause");
//	return 0;
//}

//构造函数的调用规则
// 默认情况下C++编译器至少给一个类添加3个函数
// 1.默认构造函数(无参，函数体为空)
// 1.默认析构函数(无参，函数体为空)
// 1.默认拷贝构造函数，对属性进行拷贝
//
// 构造函数调用规则如下：
// 如果用户定义有参构造函数，C++不在提供默认无参构造，但会提供默认拷贝构造
// 如果用户定义拷贝构造函数，C++不会在提供其他构造函数
//结论：定义有参，不会提供默认，但会提供拷贝。定义拷贝，不会提供默认和有参

//class Person
//{
//public:
//	//Person()
//	//{
//	//	cout << "person的默认构造函数调用" << endl;
//	//}
//	//Person(int age)
//	//{
//	//	cout << "person的有参构造函数调用" << endl;
//	//	m_age = age;
//
//	//}
//	Person(const Person& p)
//	{
//		cout << "person的拷贝构造函数调用" << endl;
//		m_age = p.m_age;
//
//	}
//	~Person()
//	{
//		cout << "person的默认析构函数调用" << endl;
//	}
//
//	int m_age;
//};
//
////void test01()
////{
////	Person p;
////	p.m_age = 18;
////
////	Person p2(p);//上面的拷贝构造函数注释掉了。但是还能出现值，说明我没写拷贝构造编译器自动给我写
////	cout << "p2年龄：" << p2.m_age << endl;
////}
//
//void test02()
//{
//	Person p;//这里把默构造给注释掉了，在调用默认构造会报错
//	//Person p(28);
//	Person p2(p);
//	cout << "p2年龄：" << p2.m_age << endl;
//}
//int main()
//{
//	//test01();
//	test02();
//	system("pause");
//	return 0;
//}

//深拷贝与浅拷贝
// 面试经典问题
// 浅拷贝：简单赋值拷贝
// 深拷贝：在堆区重新申请空间，进行拷贝
//总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题

//class Person
//{
//public:
//	Person()
//	{
//		cout << "person默认构造函数调用" << endl;
//	}
//	Person(int age, int height)
//	{
//		m_Age = age;
//		m_Height = new int(height);
//		cout << "person参构造函数调用" << endl;
//	}
//	//自己实现拷贝构造函数 解决浅拷贝带来的问题
//	Person(const Person& p)
//	{
//		m_Age = p.m_Age;
//		//m_Height = p.m_Height;//编译器默认实现就是这行代码
//		//深拷贝操作
//		m_Height = new int(*p.m_Height);
//
//		cout << "person深拷贝造函数调用" << endl;
//	}
//	~Person()
//	{
//		//析构代码，将堆区开辟的数据做释放操作
//		if (m_Height != NULL)
//		{
//			delete(m_Height);
//			m_Height = NULL;
//		}
//		cout << "person默认析构函数调用" << endl;
//	}
//
//	int m_Age;
//	int* m_Height;//身高
//};
////注意：如果利用编译器提供的拷贝构造函数，会做浅拷贝操作。因为是复制一份一样的两个是不想关联的，p2先释放，然后p在释放，堆区的内存重复释放
////浅拷贝的问题 要利用深拷贝进行解决(自己创建以一个拷贝构造函数) - 指针指向不同的堆区地址
//void test01()
//{
//	Person p(18,160);
//	cout << "p年龄：" << p.m_Age <<"身高为："<<*p.m_Height<< endl;
//	Person p2(p);//编译器默认给我们做了浅拷贝操作，指针指向同一块地址，做两次释放崩了
//	cout << "p2年龄：" << p2.m_Age << "身高为：" << *p.m_Height << endl;
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//初始化列表
// 作用：C++提供了初始化列表语法，用来初始化属性
// 语法：构造函数():属性1(值1)，属性2(值2)...{}

class Person
{
public:
	//传统的初始化操作
	//Person(int a,int b,int c)
	//{
	//	m_A = a;
	//	m_B = b;
	//	m_C = c;
	//}
	
	//初始化列表操作
	Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c)
	{

	}
	~Person()
	{
		
	}

	int m_A;
	int m_B;
	int m_C;
private:

};

void test01()
{
	//Person p(10, 20, 30);//传统
	Person p(30,20,10);//列表
	cout << "m_A = " << p.m_A << endl;
	cout << "m_B = " << p.m_B << endl;
	cout << "m_C = " << p.m_C << endl;
}
int main()
{
	test01();

	system("pause");
	return 0;
}

//类对象作为类成员 - 就是套娃
//C++类中的成员可以是另一个类的对象，我们称该成员为对象成员
//先有类还是类对象？
//总结：当其他类对象作为本类成员，构造的时候先构造类对象，在构造自身，析构的顺序与构造相反。可以理解成栈，先进后出，后进先出

//类对象最为类属性
//手机类
class Phone
{
public:
	Phone(string PName)
	{
		m_PName = PName;
		cout << "phone 构造函数调用" << endl;
	}
	~Phone()
	{
		cout << "phone 析构函数调用" << endl;

	}

	//品牌名称
	string m_PName;
};

//人类
class Person
{
public:
	//相当于Phone m_Phone = phone;
	Person(string name, string PNone):m_Name(name), m_Phone(PNone)
	{
		cout << "person 构造函数调用" << endl;
	}
	~Person()
	{
		cout << "person 析构函数调用" << endl;
	}
	string m_Name;
	Phone m_Phone;

};

void test01()
{
	Person p("张三", "诺基亚");

	cout << p.m_Name << "拿着" << p.m_Phone.m_PName << endl;
}

int main()
{
	test01();

	system("pause");
	return 0;
}

