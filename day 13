#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string>
#include<iostream>
using namespace std;

//运算符重定义
//运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型
// 总结：对于内置的表达式的运算符是不可能改变的，不要滥用运算符重载
// 
//加号运算符重载
// 作用：实现两个自定义数据类型相加的运算

//成员函数重载+号
//全局函数实现重载+号

//class Person
//{
//public:
//	
//	//成员函数重载+号
//	//Person operator+(Person& p)//这个是+号不是普通的函数，本来3=1可以但是3=1+2不行有了这个重载就可以了，简单说：p3 = p1 这个函数 p2，（this是指定，谁用是谁的，p1用了所以p1的，然后传进去了p2）
//	//{
//	//	Person temp;
//	//	temp.m_A = this->m_A + p.m_A;
//	//	temp.m_B = this->m_B + p.m_B;
//	//	return temp;
//	//}
//
//	int m_A;
//	int m_B;
//};
//
////全局函数实现重载+号
//Person operator+(Person& p1, Person& p2)
//{
//	Person temp;
//	temp.m_A = p1.m_A + p2.m_A;
//	temp.m_B = p1.m_B + p2.m_B;
//	return temp;
//}
//
////函数重载的版本
//Person operator+(Person& p1, int num)
//{
//	Person temp;
//	temp.m_A = p1.m_A + num;
//	temp.m_B = p1.m_B + num;
//	return temp;
//}
//
//void test01()
//{
//	Person p1;
//	p1.m_A = 10;
//	p1.m_B = 10;
//	Person p2;
//	p2.m_A = 10;
//	p2.m_B = 10;
//
//	Person p3;
//	//成员函数重载本质的调用
//	//Person p3 = p1.operator+(p2);
//
//	//全局函数重载本质的调用
//	//Person p3 = operator+(p1, p2);
//
//	p3 = p1 + p2;//两种调用简化之后就是这个
//	cout << "p3.m_A = " << p3.m_A << "\np3.m_B = " << p3.m_B << endl;
//
//	//运算符重载 也可以发生函数重载
//	Person p4;
//	p4 = p1 + 100;//person + int
//	cout << "p4.m_A = " << p4.m_A << "\np4.m_B = " << p4.m_B << endl;
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//左移运算符重载
//总结：重载左移运算符配合元友可以实现输出自定义数据类型
//class Person
//{
//	friend ostream& operator<<(ostream& cout, Person& p);
//public:
//	Person(int a,int b)
//	{
//		m_A = a;
//		m_B = b;
//	}
//
//private:
//	//利用成员函数重载 左移运算符  p.operator<<(cout) 简化版本 p << cout
//	//不会利用成员函数重载<<运算符，因为无法实现cout在左侧
//	//void operator<<( cout )
//	//{
//
//	//}
//
//	int m_A;
//	int m_B;
//
//
//};
//
////只能全局函数重载左移运算符
//ostream& operator<<(ostream& cout, Person& p)//本质 operator<< (cout,p) 简化 cout << p
//{
//	cout << "m_A = " << p.m_A << "\nm_B = " << p.m_B;
//	return cout;
//}
//
//void test01()
//{
//	Person p(10,10);
//	//p.m_A = 10;
//	//p.m_B = 10;
//
//	cout << p << "" << endl;
//}
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//递增运算符重载
//作用：通过重载递增运算符，实现自己的整型数据

//自定义的整型
//class MyInteger
//{
//	friend ostream& operator<<(ostream& out, MyInteger p);
//
//public:
//	MyInteger()
//	{
//		m_Num = 0;
//	}
//
//	//重载前置++
//	MyInteger& operator++()//为什么是地址不是值呢，如果是值返回的是另一个对象，虽然看上去成功了，但只++了一次。地址返回的都是一个对象所以可以++无限次。
//	{
//		//先做++的操作
//		m_Num++;
//
//		//this是指向自身的*是解引用
//		return *this;
//	}
//	//重置后置++
//	//MyInteger operator++(int)//这个int代表占位参数，可以区分前置和后置递增或递减(它只认int)
//	MyInteger operator++(int)//为什么后置返回值了，如果返回地址，返回的是局部变量的引用，局部变量出了这个函数会销毁所以返回了空指针，所以要返回值
//	{
//		//先 记录当前的结果，
//		MyInteger temp = *this;
//
//		//后 递增
//		m_Num++;
//
//		//最后返回记录的结果
//		return temp;
//	}
//
//private:
//
//	int m_Num;
//
//};
//
////重载左移运算符
//ostream& operator<<(ostream& out, MyInteger p)
//{
//	cout << "m_Num = " << p.m_Num << endl;
//	return out;
//}
//
//void test01()
//{
//	MyInteger myint;
//	cout << ++(++myint) << endl;
//	cout << myint << endl;
//}
//
//void test02()
//{
//	MyInteger myint;
//	cout << myint++ << endl;
//	cout << myint << endl;
//}
//
//int main()
//{
//	//test01();
//	test02();
//
//	system("pause");
//	return 0;
//}

//赋值运算符重载
//c++编译器至少给一个类添加4个函数
// 默认构造函数(无参，函数体为空)
// 默认析构函数(无参，函数体为空)
// 默认拷贝构造函数，对属性进行值拷贝
// 赋值运算符operator=，对属性进行拷贝

//class Person
//{
//public:
//	Person(int age)
//	{
//		m_Age = new int(age);
//	}
//	Person(Person& p)
//	{
//		p.m_Age = new int(*m_Age);
//	}
//	~Person()
//	{
//		if (m_Age != NULL)
//		{
//			delete m_Age;
//			m_Age = NULL;
//		}
//	}
//
//	//重载赋值运算符
//	Person& operator=(Person& p)
//	{
//		//编译器提供的浅拷贝
//		//m_Age = p.m_Age;
//
//		//应该先判断是否有属性在堆区，如果有先释放干净，然后在深拷贝
//		if (m_Age != NULL)
//		{
//			delete m_Age;
//			m_Age = NULL;
//		}
//		
//		//深拷贝操作
//		m_Age = new int(*p.m_Age);
//
//		//返回对象的本身
//		return *this;
//
//	}
//
//	int* m_Age;
//
//private:
//
//};
//
//void test01()
//{
//	Person p1(18);
//	Person p2(20);
//	Person p3(30);
//
//	p3 = p2 = p1;//隐藏风险浅拷贝，解决：深拷贝，练等是链式代码，返回值不可能是空
//
//	cout << "p1的年龄为：" << *p1.m_Age << endl;
//	cout << "p2的年龄为：" << *p2.m_Age << endl;
//	printf("p3的年龄为：%d\n", *p3.m_Age);
//}
//
//int main()
//{
//	test01();
//
//	/*int a = 10;
//	int b = 20;
//	int c = 30;
//	c = b = a;
//	cout << "a = " << a << endl;
//	cout << "b = " << b << endl;
//	cout << "c = " << c << endl;*/
//
//	system("pause");
//	return 0;
//}

//关系运算符重载
// 作用：重载关系运算符可以让两个自定义类型对象进行对比操作
//< > = !=
//class Person
//{
//public:
//	Person(string name, int age);
//	~Person();
//
//	string m_Name;
//	int m_Age;
//	
//	//重载 == 符号
//	bool operator==(Person& p)
//	{
//		if (m_Name == p.m_Name && m_Age == p.m_Age)
//		{
//			return true;
//		}
//		return false;
//		
//	}
//
//	//重载 != 符号
//	bool operator!=(Person& p)
//	{
//		if (m_Name == p.m_Name && m_Age == p.m_Age)
//		{
//			return false;
//		}
//		return true;
//	}
//
//};
//
//Person::Person(string name, int age)
//{
//	m_Name = name;
//	m_Age = age;
//}
//
//Person::~Person()
//{
//}
//
//void test01()
//{
//	Person p1("tom", 18);
//	Person p2("jerry", 18);
//	Person p3("jerry",20);
//
//	if (p1 == p2)
//	{
//		cout << "p1 = p2" << endl;
//	}
//	else
//	{
//		cout << "p1 != p2" << endl;
//	}
//
//	if (p1 != p2)
//	{
//		cout << "p1 != p2" << endl;
//	}
//	else
//	{
//		cout << "p1 = p2" << endl;
//	}
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//函数调用运算符重载
// 函数调用运算符()也可以重载
// 由于重载后使用的方式非常像函数的调用，因此称为仿函数
// 仿函数没有固定的写法，非常灵活

class Myparson
{
public:
	Myparson();
	~Myparson();
	//很像个函数
	void operator()(string test)
	{
		cout << test << endl;
		//printf("%s\n", test);
	}

private:

};

Myparson::Myparson()
{
}

Myparson::~Myparson()
{
}

void MyParson02(string test)//用函数也行
{
	cout << test << endl;
}

void test01()
{
	Myparson myParson;
	myParson("hello world");//由于使用起来非常类似于函数调用，因此称为仿函数

	MyParson02("hello world");

}

//仿函数非常灵活，没有固定的写法：如
//在写个加法类
class MyAdd
{
public:
	MyAdd();
	~MyAdd();

	int operator()(int num1, int num2)
	{
		return num1 + num2;
	}

private:

};

MyAdd::MyAdd()
{
}

MyAdd::~MyAdd()
{
}

void test02()
{
	MyAdd myAdd;
	int ret = myAdd(1, 2);
	printf("%d\n", ret);

	//匿名的函数对象,执行玩就释放
	cout << MyAdd()(100, 100) << endl;

}

int main()
{
	test01();
	test02();
	system("pause");
	return 0;
}

//继承
//继承是面向对象三大特性之一
// 列如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处
//继承的好处：减少重复的代码
//语法：class 子类 :继承方式 父类	就是：(class A :public B)
//子类 也称为 派生类
//父类 也称为 基类
//派生类(子类)中的成员，包含两大部分：
// 一类是从基类(父类)继承过来的，一类是自己增加的成员。
// 从基类(父类)继承过 过来的表现其共性，而新增的成员体现了其个性
//

//普通实现页面
// java页面
//class Java
//{
//public:
//	Java();
//	~Java();
//	void header()
//	{
//		cout << "首页、公开课、登录、注册...(公共的头部)" << endl;
//	}
//	void foorer()
//	{
//		cout << "帮助中心、交流合作、站内地图...(公共底部信息)" << endl;
//	}
//	void left()
//	{
//		cout << "java、python、C++...(公共分类列表)" << endl;
//	}
//	void content()
//	{
//		cout << "Java学科视频" << endl;
//	}
//
//private:
//
//};
//
//Java::Java()
//{
//}
//
//Java::~Java()
//{
//}
//
////python
//class Python
//{
//public:
//	void header()
//	{
//		cout << "首页、公开课、登录、注册...(公共的头部)" << endl;
//	}
//	void foorer()
//	{
//		cout << "帮助中心、交流合作、站内地图...(公共底部信息)" << endl;
//	}
//	void left()
//	{
//		cout << "java、python、C++...(公共分类列表)" << endl;
//	}
//	void content()
//	{
//		cout << "Python学科视频" << endl;
//	}
//
//private:
//
//};
//
////C++
//class Cpp
//{
//public:
//	void header()
//	{
//		cout << "首页、公开课、登录、注册...(公共的头部)" << endl;
//	}
//	void foorer()
//	{
//		cout << "帮助中心、交流合作、站内地图...(公共底部信息)" << endl;
//	}
//	void left()
//	{
//		cout << "java、python、C++...(公共分类列表)" << endl;
//	}
//	void content()
//	{
//		cout << "C++学科视频" << endl;
//	}
//
//private:
//
//};

//继承写法
//class BasePage
//{
//public:
//	BasePage();
//	~BasePage();
//
//		void header()
//	{
//		cout << "首页、公开课、登录、注册...(公共的头部)" << endl;
//	}
//	void foorer()
//	{
//		cout << "帮助中心、交流合作、站内地图...(公共底部信息)" << endl;
//	}
//	void left()
//	{
//		cout << "java、python、C++...(公共分类列表)" << endl;
//	}
//
//private:
//
//};
//
//BasePage::BasePage()
//{
//}
//
//BasePage::~BasePage()
//{
//}
//
////Java页面
//class Java :public BasePage
//{
//public:
//	void content()
//	{
//		cout << "Java学科视频" << endl;
//	}
//};
////Python页面
//class Python :public BasePage
//{
//public:
//	void content()
//	{
//		cout << "python学科视频" << endl;
//	}
//};
////C++页面
//class Cpp :public BasePage
//{
//public:
//	void content()
//	{
//		cout << "c++学科视频" << endl;
//	}
//};
//void test01()
//{
//	cout << "java下载视频如下：" << endl;
//	Java ja;
//	ja.header();
//	ja.foorer();
//	ja.left();
//	ja.content();
//
//	cout << "------------------" << endl;
//	cout << "python下载视频如下：" << endl;
//	Python py;
//	py.header();
//	py.foorer();
//	py.left();
//	py.content();
//
//	cout << "------------------" << endl;
//	cout << "C++下载视频如下：" << endl;
//	Cpp cp;
//	cp.header();
//	cp.foorer();
//	cp.left();
//	cp.content();
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//继承方式
// 继承语法 class 子类 :继承方式 父类
// 继承方式一共有三种
//公共继承
//保护继承
//私有继承

//继承方式
//class Base1
//{
//public:
//	Base1();
//	~Base1();
//
//	int m_A;
//protected:
//	int m_B;
//
//private:
//	int m_C;
//};
//
//Base1::Base1()
//{
//}
//
//Base1::~Base1()
//{
//}
//
////公共继承 公共权限类内能访问，类外也能访问
//class son1 :public Base1
//{
//	void func()
//	{
//		m_A = 10;//父类中的公共权限成员 到子类中依然是公共权限
//		m_B = 10;//父类中的保护权限成员 到子类中依然是保护权限
//		//m_C = 10;//父类中的私有权限成员 子类访问不到
//	}
//};
//
////保护继承  保护权限类内能访问，类外访问不了
//class son2 :protected Base1
//{
//	void func()
//	{
//		m_A = 10;//父类中的公共权限成员 到子类中变为 保护权限
//		m_B = 10;//父类中的保护权限成员 到子类中变为 保护权限
//		//m_C = 10;//父类中的私有权限成员 子类访问不到
//	}
//};
//
////私有继承
//class son3 :private Base1
//{
//	void func()
//	{
//		m_A = 10;//父类中的公共权限成员 到子类中变为 私有权限
//		m_B = 10;//父类中的保护权限成员 到子类中变为 私有权限
//		//m_C = 10;//父类中的私有权限成员 子类访问不到
//	}
//};
//
////验证私有继承
//class GrandSon3 :private son3//公共访问不了，保护也访问不了,隐私也访问呢不了，因为在父类就是隐私了
//{
//public:
//	void func()
//	{
//		//m_A = 100;//到son3中 m_A变为私有，即使是儿子，也访问不到
//		//m_B = 100;//到son3中 m_A变为私有，即使是儿子，也访问不到
//		//m_C = 100;//别想了，父类都访问不到子类能访问？
//	}
//};
//
//void test01()
//{
//	son1 s1;
//	s1.m_A = 100;//在son1中m_A是公共权限，因此能访问到
//	//保护，隐私 访问不到
//
//	son2 s2;
//	//s2.m_A = 100;//在son2中m_A变为保护权限，因此类外访问不到
//	//s2.m_B = 100;//在son2中m_B保护权限 不可访问
//
//	son3 s3;
//	//s3.m_A = 100;//在son3中m_A变为私有权限，因此类外访问不到
//	//s3.m_B = 100;//在son3中m_B变为私有权限，因此类外访问不到
//}
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//继承中的对象模型
// 问题：从父类继承过来的成员，那些属于子类对象中?

//class Base
//{
//public:
//	Base();
//	~Base();
//	int m_A;
//protected:
//	int m_B;
//
//private:
//	int m_C;
//
//};
//
//Base::Base()
//{
//}
//
//Base::~Base()
//{
//}
//
//class Son :public Base
//{
//public:
//	int m_D;
//};
//
//void test01()
//{
//	//可能是4，12，16 答案是16
//	//父类中所有非静态成员属性都会被子类继承下去
//	//父类中私有的成员属性 是被编译器给隐藏了，因此访问不道，但是确实被继承下去了
//	cout << "size of Son = " << sizeof(Son) << endl;
//}
//
////利用开发人员命令提示符工具查看对象模型(Developer Command Prompt for VS 2019)
//// 跳转盘符 C: (这个程序存在的盘中)
//// 跳转文件路径 cd 具体的路径下
//// 查看命令
//// cl /d1 reportSingleClassLayout类的类名 "文件名"
////在 vs2019开发人员命令提示符中cl /d1 reportSingleClassLayout类的类名 "文件名"
//
//int main()
//{
//	test01();
//
//	system("pause");
//	return 0;
//}

//继承中构造和析构的顺序
//子类继承父类后，当创建子类对象，也会调用父类的构造函数
// 问题：父类和子类的构造和析构顺序谁先谁后 (现有子类对象还是父类对象)

class Base
{
public:
	Base();
	~Base();

private:

};

Base::Base()
{
	cout << "Base构造函数" << endl;
}

Base::~Base()
{
	cout << "Base析构函数" << endl;
}

class Son :public Base
{
public:
	Son()
	{
		cout << "Son构造函数" << endl;
	}
	~Son()
	{
		cout << "Son析构函数" << endl;
	}
};

void test01()
{
	//Base b;
	
	//继承中的构造和析构顺序如下：
	//先构造父类，在构造子类，析构的顺序于构造的顺序相反(说白了就是栈! 先进后出)
	Son s;
}

int main()
{
	test01();

	system("pause");
	return 0;
}

//继承同名成员处理方式
//问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类同名的数据呢
// 访问子类同名成员 直接访问即可
// 访问父类同名成员 需要及作用域
//总结：子类对象可以直接访问到子类中同名成员
//		子类对象加作用域可以访问到父类同名成员
//		当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用与可以访问到父类中同名函数

class Base
{
public:
	Base();
	~Base();

	int m_A;

	void func()
	{
		cout << "base - func()的函数调用" << endl;

	}
	void func(int a )
	{
		cout << "base - func(int a )的函数调用" << endl;

	}

};

Base::Base()
{
	m_A = 100;
}

Base::~Base()
{
}

class Son :public Base
{
public:

	Son()
	{
		m_A = 200;
	}

	void func()
	{
		cout << "son - func()的函数调用" << endl;

	}

	int m_A;
};

void test01()
{
	Son s;

	//成员属性(对象)
	cout << "son 下 m_A = " << s.m_A << endl;//直接调用
	//如果通过子类对象 访问到父类中同名成员，需要加作用域
	cout << "base 下 m_A = " << s.Base::m_A << endl;

	//成员函数
	s.func();//直接调用
	//如何调用到父类 = 加作用域
	s.Base::func();

	//如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数 (就是不能直接访问父类中的成员函数，因为子类会自动把同名的父类成员函数给隐藏掉)
	//如果想访问到父类中被隐藏的同名成员函数，需要加作用域
	s.Base::func(10);
}

int main()
{
	test01();

	system("pause");
	return 0;
}
