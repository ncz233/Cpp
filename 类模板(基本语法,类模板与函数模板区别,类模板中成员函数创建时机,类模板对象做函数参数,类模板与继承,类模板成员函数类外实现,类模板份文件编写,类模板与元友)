#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<string>
#include<stdio.h>
//#include"person.cpp"// 1.直接包含.cpp文件(基本没人去做)
//#include"person.hpp"// 2.将声明和实现写道同一文件中,并更改后缀名为.hpp,hpp时约定的名称,并不是强制
using namespace std;

//类模板语法
//作用
// 建立一个通用类,类中的成员数据类型可以不具体定制,用一个虚拟的类型代表
//语法
// temolate<class T>
// 类
//
//函数模板和类模板的区别就是在temolate<class T>这个代码后面写 函数 或者 类
//总结:类模板和函数模板语法相似,在线恒明模板template后面加类,此类成为类模板

//template<class NameType, class AgeType>
//class Person
//{
//public:
//	Person(NameType name, AgeType age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//
//	void shouPerson()
//	{
//		cout << "name:" << m_Name << "\nage:" << m_Age << endl;
//	}
//
//	NameType m_Name;
//	AgeType m_Age;
//
////private:
//
//};
//
//void test01()
//{
//	Person<string, int> p1("小黑", 11);
//	p1.shouPerson();
//
//}
//
//int main()
//{
//	test01();
//
//	system("pause");  
//	return 0;
//}

//类模板与函数模板的区别
//类模板与函数模板区别主要有两点
// 类模板没有自动推到的使用方式
// 类模板在横板参数列表中可以有默认参数
//
// 总结
// 类模板使用只能用显示指定类型方式
// 类模板中的模板参数列表可以有默认参数

//类模板与函数模板区别
//template<class NameType, class AgeType = int>
//class Person
//{
//public:
//	Person(NameType name, AgeType age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//
//	void showPerson()
//	{
//		cout << "name:" << m_Name << "\nage:" << m_Age << endl;
//	}
//
////private:
//	NameType m_Name;
//	AgeType m_Age;
//};
//
//// 类模板没有自动推到的使用方式
//void test01()
//{
//	//Person p1("小白", 2); 错误, 无法用自动类型推到
//	Person<string, int> p1("小白", 2);
//	p1.showPerson();
//}
//
//// 类模板在横板参数列表中可以有默认参数(就是可以在模板中让以一个数据类型是一个默认值)
//void test02()
//{
//	Person<string> p2("小黑", 3);
//	p2.showPerson();
//}
//
//
//int main()
//{
//	test01();
//	test02();
//
//	system("pause");  
//	return 0;
//}

//类模板中成员函数创建时机
//类模板中成员函数和普通类种成员函数创建时机是有区别的
// 普通类中的成员函数一开始就可以创建
// 类模板中的成员函数在调用时才创建
//总结: 类模板中的成员函数并不是一开始就创建的,在调用时去创建
//为什么,因为在调用阶段创建是为了保证模板的通用性.

//类模板中成员函数创建时机
// 类模板中的成员函数在调用时才创建
//class Person1
//{
//public:
//	void showPerson1()
//	{
//		cout << "person1 show" << endl;
//	}
//};
//
//class Person2
//{
//public:
//	void showPerson2()
//	{
//		cout << "person2 show" << endl;
//	}
//};
//
//template<class T>
//class MyClass
//{
//public:
//	T obj;
//
//	// 类模板中的成员函数在调用时才创建(意思时只要不调用类模板中的成员函数,不管这个成员函数是对是错都能编译成功,因为没创建)[仅仅是编译成功,不是执行]
//	//类模板中的成员函数
//	void func1()
//	{
//		obj.showPerson1();
//	}
//
//	void func2()
//	{
//		obj.showPerson2();
//	}
//
//};
//
//void test01()
//{
//	MyClass<Person2>m;
//	m.func1();
//	//m.func2();//当T = person1的时候showperson2不是person1的成员
//}
//
//int main()
//{
//	test01();
//
//	system("pause");  
//	return 0;
//}

//类模板对象做函数参数
// 类模板实列化出的对象,向函数传参的方式
//一共有三种传入方式(现实中第一种最常用)
// 指定传入的类型	-- 直接显示对象的数据类型
// 参数模板化		-- 将对象中的参数变为模板进行传递
// 整个类模板化		-- 将这个对象类型 模板化进行传递
//总结
// 通过类模板创建的对象,可以有三种方式向函数中进行传参
// 使用比较广泛是第一种:指定传入的类型

//类模板对象做函数参数
//template<class T1,class T2>
//class Person
//{
//public:
//	Person(T1 name, T2 age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//
//	void showPerson()
//	{
//		cout << "姓名:" << this->m_Name << "\n年龄:" << this->m_Age << endl;
//	}
//
//	T1 m_Name;
//	T2 m_Age;
//
//};
//
//// 指定传入的类型
//void printPerson1(Person<string, int> &p)
//{
//	p.showPerson();
//}
//
//void test01()
//{
//	Person<string, int> p("小明", 2);
//	printPerson1(p);
//}
//
//// 参数模板化
//template<class T1, class T2>
//void printPerson2(Person<T1, T2> &p)
//{
//	p.showPerson();
//	cout << "T1的类型" << typeid(T1).name() << endl;//这行命令时查看模板中T的数据类型
//	cout << "T2的类型" << typeid(T2).name() << endl;
//}
//
//void test02()
//{
//	Person<string, int> p("小绿", 4);
//	printPerson2(p);
//}
//
//// 整个类模板化
//template<class T>
//void printPerson3(T &p)
//{
//	p.showPerson();
//	cout << "T的类型" << typeid(T).name() << endl;
//}
//
//void test03()
//{
//	Person<string, int> p("小红", 12);
//	printPerson3(p);
//}
//
//int main()
//{
//	//test01();
//	//test02();
//	test03();
//
//	system("pause");  
//	return 0;
//}

//类模板与继承
//当类模板碰到继承时,需要注意一下几点
// 当子类继承的父类是一个类模板时,子类在声明的时候,要指定出父类中T的类型
// 如果不指定,编译器无法给子类分配内存
// 如果想灵活指定出父类中T的类型,子类也需要变为类模板
//总结: 如果父类时类模板,子类要指定出父类中T的数据类型,如果要灵活去构建子类也要编程类模板

//类模板与继承
// 当子类继承的父类是一个类模板时,子类在声明的时候,要指定出父类中T的类型
//template<class T>
//class Base
//{
//public:
//	T m;
//
//};
//
//// 如果不指定,编译器无法给子类分配内存
////class Son :public Base//错误的,必须要知道父类中的T数据类型,才能继承到子类
//class Son : public Base<int>
//{
//public:
//	
//
//};
//
//void test01()
//{
//	Son s1;
//}
//
//// 如果想灵活指定出父类中T的类型,子类也需要变为类模板
//template<class T1, class T2>
//class Son2 : public Base<T2>
//{
//public:
//	Son2()
//	{
//		cout << "T1的数据类型为:" << typeid(T1).name() << endl;
//		cout << "T2的数据类型为:" << typeid(T2).name() << endl;
//	}
//	T1 obj;
//
//};
//
//void test02()
//{
//	Son2<int, char> s2;
//}
//
//int main()
//{
//	test02();
//	system("pause");
//	return 0;
//}

//类模板成员函数类外实现
//类模板和类的成员函数类外实现的区别
//类模板的类外实现要加模板声明(必须和类模板一样),还要加模板的参数列表
//总结: 类模板中成员函数类外实现时,需要加上模板 和 模板参数列表

//template<class T1, class T2>
//class Person
//{
//public:
//	Person(T1 name, T2 age);
//	//{
//	//	this->m_Name = name;
//	//	this->m_Age = age;
//	//}
//
//	void showPrint();
//	//{
//	//	cout << "姓名:" << m_Name << "年龄" << m_Age << endl;
//	//}
//
//	T1 m_Name;
//	T2 m_Age;
//};
//
////构造函数类外实现
////Person::Person(T1 name, T2 age)//普通构造函数类外实现
//template<class T1, class T2>
//Person<T1, T2>::Person(T1 name, T2 age)
//{
//	this->m_Name = name;
//	this->m_Age = age;
//}
//
////成员函数类外实现
////void Person::showPrint()//普通类成员函数类外实现
//template<class T1, class T2>
//void Person<T1, T2>::showPrint()
//{
//	cout << "姓名:" << m_Name << "\n年龄" << m_Age << endl;
//}
//
//void test01()
//{
//	Person<string, int> p1("Tom", 1);
//	p1.showPrint();
//
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}

//类模板分文件编写
// 问题: 类模板中成员函数创建时机是在调用阶段,导致份文件编写时链接不到
// 解决
// 1.直接包含.cpp文件(基本没人去做)
// 2.将声明和实现写道同一文件中,并更改后缀名为.hpp,hpp时约定的名称,并不是强制
//总结: 主流的解决方法是第二种,将类模板成员函数写到一起,并将后缀名改为.hpp

////类模板分文件编写问题及解决
////template<class T1, class T2>
////class Person
////{
////public:
////	Person(T1 name, T2 age);
////	~Person();
////	void showPerson();
////
////	T1 m_Name;
////	T2 m_Age;
////
////};
//
////template<class T1, class T2>
////Person<T1,T2>::Person(T1 name, T2 age)
////{
////	this->m_Name = name;
////	this->m_Age = age;
////}
////
////template<class T1, class T2>
////void Person<T1, T2>::showPerson()
////{
////	cout << "name:" << this->m_Name << "\nage:" << this->m_Age << endl;
////}
////
////template<class T1, class T2>
////Person<T1, T2>::~Person()
////{
////}

//void test01()
//{
//	Person<string, int>p("van", 24);
//	p.showPerson();
//}
//
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}
--------------------------------------------------.hpp时约定的名称
#pragma once
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<string>
#include<stdio.h>
using namespace std;

template<class T1, class T2>
class Person
{
public:
	Person(T1 name, T2 age);
	~Person();
	void showPerson();

	T1 m_Name;
	T2 m_Age;

};

template<class T1, class T2>
Person<T1, T2>::Person(T1 name, T2 age)
{
	this->m_Name = name;
	this->m_Age = age;
}

template<class T1, class T2>
void Person<T1, T2>::showPerson()
{
	cout << "name:" << this->m_Name << "\nage:" << this->m_Age << endl;
}

template<class T1, class T2>
Person<T1, T2>::~Person()
{
}
----------------------------------------------------------------------------.hpp时约定的名称结束 && 继续

//类模板与友元
//全局函数类内实现 - 直接在类内声明元友即可
//全局函数类外实现 - 需要提前让编译器知道全局函数的存在 
//总结: 建议全局函数做类内实现,用法简单,而且编译器直接识别,类外复杂,理解就行

////提前让编译器知道person类存在,要声明,而且他是模板所以也要把模板也一起声明了
//template<class T1, class T2>
//class Person;
//
////类外实现的函数,要先让编译器知道这是个类外实现的元友
//template<class T1, class T2>
//void printPerson2(Person<T1, T2> p)
//{
//	cout << "类外name:" << p.m_Name << "\n类外age:" << p.m_Age << endl;
//}
//
////通过全局函数打印person信息
//template<class T1, class T2>
//class Person
//{
//	//全局函数类内实现
//	friend void printPerson(Person<T1, T2> p)
//	{
//		cout << "name:" << p.m_Name << "\nage:" << p.m_Age << endl;
//	}
//
//	//全局函数类外实现(普通函数)
//	//加空模板参数列表
//	//如果全局函数是类外实现,需要让编译器提前知道这个函数的存在,因为它的本质发生了变化不是普通的函数了,是函数模板
//	//所以要提前让编译器知道这个类外实现的函数,就要把他放在上面,而且还要声明类模板才行
//	friend void printPerson2<>(Person<T1, T2> p);//
//
//public:
//	Person(T1 name, T2 age);
//	~Person();
//
//private:
//	T1 m_Name;
//	T2 m_Age;
//
//};
//
//template<class T1, class T2>
//Person<T1,T2>::Person(T1 name, T2 age)
//{
//	this->m_Name = name;
//	this->m_Age = age;
//}
//
//template<class T1, class T2>
//Person<T1, T2>::~Person()
//{
//}
//
////全局函数类内实现
//void test01()
//{
//	Person<string, int>p("tom", 24);
//	printPerson(p);
//}
//
////全局函数类外实现
//void test02()
//{
//	Person<string, int>p("jerry", 25);
//	printPerson2(p);
//}
//
//int main()
//{
//	//test01();
//	test02();
//	system("pause");
//	return 0;
//}

//相关案列
//实现通用的数组类
//要求
// 可以存放自定义数据类型
// 存放到堆区
// 构造函数中可以传入数组的容量
// 提供对应的拷贝构造函数,以及防止浅拷贝问题
// 提供尾插法和尾删法
// 可以通过下标方式访问中间元素
// 可以获取数组中当前元素个数和数组的容量
//
